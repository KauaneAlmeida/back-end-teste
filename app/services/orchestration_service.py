"""
Intelligent Hybrid Orchestrator - PRODUCTION READY

Sistema de orquestra√ß√£o inteligente que combina:
- IA Gemini para respostas naturais
- Fallback Firebase para fluxo estruturado
- Valida√ß√£o rigorosa de lead_data
- Timeouts otimizados para Cloud Run
- Auto-reinicializa√ß√£o de sess√µes
- Sauda√ß√£o personalizada por hor√°rio
"""

import os
import re
import json
import uuid
import asyncio
import logging
import pytz
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Tuple
from collections import defaultdict

# Import services
from app.services.firebase_service import (
    get_conversation_flow, 
    save_user_session, 
    get_user_session,
    save_lead_data
)
from app.services.baileys_service import baileys_service
from app.services.lawyer_notification_service import lawyer_notification_service
from app.services.ai_chain import ai_orchestrator

# Configure logging
logger = logging.getLogger(__name__)

class IntelligentHybridOrchestrator:
    """
    ‚úÖ ORQUESTRADOR H√çBRIDO INTELIGENTE - PRODUCTION READY
    
    Combina IA Gemini + Fallback Firebase com:
    - Valida√ß√£o rigorosa de lead_data (elimina HTTP 500)
    - Timeouts ultra otimizados para Cloud Run
    - Auto-reinicializa√ß√£o de sess√µes travadas
    - Sauda√ß√£o personalizada por hor√°rio
    - Rate limiting e prote√ß√£o contra spam
    """
    
    def __init__(self):
        # ‚è∞ TIMEOUTS ULTRA AGRESSIVOS PARA CLOUD RUN
        self.gemini_timeout = 4  # ‚úÖ REDUZIDO DE 8s PARA 4s
        self.whatsapp_timeout = 6  # ‚úÖ REDUZIDO DE 10s PARA 6s
        self.firebase_timeout = 3  # ‚úÖ REDUZIDO DE 5s PARA 3s
        self.whatsapp_global_timeout = 15  # ‚úÖ REDUZIDO DE 25s PARA 15s
        self.notification_timeout = 8  # ‚úÖ REDUZIDO DE 15s PARA 8s
        
        # Rate limiting
        self.message_counts = defaultdict(list)
        self.max_messages_per_minute = 10
        
        # Session locks para evitar race conditions
        self.session_locks = defaultdict(asyncio.Lock)
        
        # Gemini availability tracking
        self.gemini_available = True
        self.last_gemini_check = datetime.now()
        self.gemini_check_interval = timedelta(minutes=5)
        
        logger.info("üöÄ IntelligentHybridOrchestrator inicializado com timeouts ultra agressivos")

    def safe_get_lead_data(self, session_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        ‚úÖ GARANTIR QUE LEAD_DATA SEMPRE SEJA UM DICT V√ÅLIDO
        
        Esta fun√ß√£o elimina o erro HTTP 500 causado por lead_data undefined/null
        """
        lead_data = session_data.get("lead_data")
        if not lead_data or not isinstance(lead_data, dict):
            return {}
        return lead_data

    async def _ensure_session_integrity(self, session_id: str, session_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        ‚úÖ GARANTIR INTEGRIDADE DA SESS√ÉO
        
        Corrige sess√µes antigas que n√£o t√™m lead_data ou t√™m campos inv√°lidos
        """
        needs_save = False
        
        # ‚úÖ GARANTIR LEAD_DATA SEMPRE PRESENTE
        if "lead_data" not in session_data or session_data["lead_data"] is None:
            session_data["lead_data"] = {}
            needs_save = True
            logger.warning(f"‚ö†Ô∏è Corrigindo lead_data ausente na sess√£o {session_id}")
        
        # ‚úÖ GARANTIR CAMPOS ESSENCIAIS
        essential_fields = {
            "session_id": session_id,
            "platform": "web",
            "current_step": 1,
            "flow_completed": False,
            "phone_submitted": False,
            "gemini_available": True,
            "message_count": 0,
            "created_at": datetime.now().isoformat(),
            "last_updated": datetime.now().isoformat()
        }
        
        for field, default_value in essential_fields.items():
            if field not in session_data:
                session_data[field] = default_value
                needs_save = True
        
        # ‚úÖ SALVAR SE HOUVER CORRE√á√ïES (COM TIMEOUT)
        if needs_save:
            try:
                await asyncio.wait_for(
                    save_user_session(session_id, session_data),
                    timeout=self.firebase_timeout
                )
                logger.info(f"‚úÖ Sess√£o {session_id} corrigida e salva")
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ Timeout Firebase save ({self.firebase_timeout}s) - continuando")
            except Exception as save_error:
                logger.warning(f"‚ùå Erro Firebase save: {str(save_error)} - continuando")
        
        return session_data

    async def start_conversation(self, session_id: Optional[str] = None) -> Dict[str, Any]:
        """
        ‚úÖ INICIAR CONVERSA COM SAUDA√á√ÉO PERSONALIZADA POR HOR√ÅRIO
        
        Retorna sauda√ß√£o baseada no hor√°rio de Bras√≠lia:
        - Bom dia (5h-12h)
        - Boa tarde (12h-18h) 
        - Boa noite (18h-5h)
        """
        correlation_id = str(uuid.uuid4())[:8]
        
        try:
            # ‚úÖ GERAR SESSION_ID SE N√ÉO FORNECIDO
            if not session_id:
                session_id = f"web_{int(datetime.now().timestamp())}_{correlation_id}"
            
            logger.info(f"üöÄ [{correlation_id}] Iniciando conversa: {session_id}")
            
            # ‚úÖ SAUDA√á√ÉO PERSONALIZADA POR HOR√ÅRIO (BRAS√çLIA)
            try:
                brasilia_tz = pytz.timezone('America/Sao_Paulo')
                now = datetime.now(brasilia_tz)
                hour = now.hour
                
                if 5 <= hour < 12:
                    greeting = "Bom dia"
                elif 12 <= hour < 18:
                    greeting = "Boa tarde"
                else:
                    greeting = "Boa noite"
                
                logger.info(f"üåÖ [{correlation_id}] Hor√°rio: {hour}h - Sauda√ß√£o: {greeting}")
                
            except Exception as time_error:
                logger.warning(f"‚ö†Ô∏è [{correlation_id}] Erro ao obter hor√°rio: {str(time_error)}")
                greeting = "Ol√°"
            
            # ‚úÖ MENSAGEM DE SAUDA√á√ÉO COMPLETA
            welcome_message = f"{greeting}! Seja bem-vindo ao m.lima. Estou aqui para entender seu caso e agilizar o contato com um de nossos advogados especializados.\n\nPara come√ßar, qual √© o seu nome completo?"
            
            # ‚úÖ CRIAR SESS√ÉO INICIAL COM LEAD_DATA V√ÅLIDO
            session_data = {
                "session_id": session_id,
                "platform": "web",
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "gemini_available": True,
                "message_count": 0,
                "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                "created_at": datetime.now().isoformat(),
                "last_updated": datetime.now().isoformat(),
                "correlation_id": correlation_id
            }
            
            # ‚úÖ SALVAR SESS√ÉO (COM TIMEOUT)
            try:
                await asyncio.wait_for(
                    save_user_session(session_id, session_data),
                    timeout=self.firebase_timeout
                )
                logger.info(f"‚úÖ [{correlation_id}] Sess√£o inicial salva")
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ [{correlation_id}] Timeout Firebase save ({self.firebase_timeout}s) - continuando")
            except Exception as save_error:
                logger.warning(f"‚ùå [{correlation_id}] Erro Firebase save: {str(save_error)} - continuando")
            
            return {
                "session_id": session_id,
                "response": welcome_message,
                "response_type": "greeting_personalized",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "phone_submitted": False,
                "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                "greeting_type": greeting.lower().replace(" ", "_"),
                "correlation_id": correlation_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro ao iniciar conversa: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO COM LEAD_DATA V√ÅLIDO
            return {
                "session_id": session_id or f"error_{correlation_id}",
                "response": "Ol√°! Seja bem-vindo ao m.lima. Para come√ßar, qual √© o seu nome completo?",
                "response_type": "greeting_fallback",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "phone_submitted": False,
                "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                "error": str(e),
                "correlation_id": correlation_id
            }

    async def process_message(
        self, 
        message: str, 
        session_id: str, 
        phone_number: Optional[str] = None,
        platform: str = "web"
    ) -> Dict[str, Any]:
        """
        ‚úÖ PROCESSAR MENSAGEM COM VALIDA√á√ÉO RIGOROSA DE LEAD_DATA
        
        Garante que lead_data sempre seja um dict v√°lido, eliminando HTTP 500
        """
        correlation_id = str(uuid.uuid4())[:8]
        
        try:
            logger.info(f"üì® [{correlation_id}] Processando: '{message[:50]}...' | Sess√£o: {session_id}")
            
            # ‚úÖ RATE LIMITING
            if self._is_rate_limited(session_id):
                return {
                    "session_id": session_id,
                    "response": "‚è≥ Muitas mensagens em pouco tempo. Aguarde um momento...",
                    "response_type": "rate_limited",
                    "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                    "correlation_id": correlation_id
                }
            
            # ‚úÖ OBTER SESS√ÉO COM TIMEOUT
            try:
                session_data = await asyncio.wait_for(
                    get_user_session(session_id),
                    timeout=self.firebase_timeout
                )
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ [{correlation_id}] Timeout Firebase ({self.firebase_timeout}s) - usando sess√£o padr√£o")
                session_data = None
            except Exception as firebase_error:
                logger.warning(f"‚ùå [{correlation_id}] Erro Firebase: {str(firebase_error)} - usando sess√£o padr√£o")
                session_data = None
            
            # ‚úÖ CRIAR SESS√ÉO PADR√ÉO SE N√ÉO EXISTIR
            if not session_data:
                session_data = {
                    "session_id": session_id,
                    "platform": platform,
                    "current_step": 1,
                    "flow_completed": False,
                    "phone_submitted": False,
                    "gemini_available": True,
                    "message_count": 0,
                    "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                    "created_at": datetime.now().isoformat(),
                    "last_updated": datetime.now().isoformat()
                }
                logger.info(f"üÜï [{correlation_id}] Criada sess√£o padr√£o")
            
            # ‚úÖ GARANTIR INTEGRIDADE DA SESS√ÉO
            session_data = await self._ensure_session_integrity(session_id, session_data)
            
            # ‚úÖ VERIFICAR SE PRECISA AUTO-REINICIAR
            if session_data.get("flow_completed") and session_data.get("phone_submitted"):
                if message.lower().strip() in ["oi", "ol√°", "hello", "nova conversa", "reiniciar"]:
                    logger.info(f"üîÑ [{correlation_id}] Auto-reiniciando sess√£o finalizada")
                    return await self._auto_restart_session(session_id, message, correlation_id)
            
            # ‚úÖ PROCESSAR MENSAGEM
            result = await self._process_conversation_flow(session_data, message, correlation_id)
            
            # ‚úÖ GARANTIR LEAD_DATA SEMPRE PRESENTE NO RESULTADO
            if "lead_data" not in result:
                result["lead_data"] = self.safe_get_lead_data(session_data)
            
            result["correlation_id"] = correlation_id
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro cr√≠tico: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO COM LEAD_DATA V√ÅLIDO
            return {
                "session_id": session_id,
                "response": "Desculpe, ocorreu um erro tempor√°rio. Vamos tentar novamente?",
                "response_type": "system_error_recovery",
                "error": str(e),
                "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "correlation_id": correlation_id
            }

    async def _auto_restart_session(self, session_id: str, message: str, correlation_id: str) -> Dict[str, Any]:
        """
        ‚úÖ AUTO-REINICIALIZAR SESS√ÉO FINALIZADA
        
        Remove o problema do chat "finalizado" permanente
        """
        try:
            logger.info(f"üîÑ [{correlation_id}] Auto-reiniciando sess√£o: {session_id}")
            
            # ‚úÖ CRIAR NOVA SESS√ÉO LIMPA
            new_session_data = {
                "session_id": session_id,
                "platform": "web",
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "gemini_available": True,
                "message_count": 1,
                "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                "created_at": datetime.now().isoformat(),
                "last_updated": datetime.now().isoformat(),
                "restarted": True,
                "restart_reason": "auto_restart_after_completion"
            }
            
            # ‚úÖ SALVAR NOVA SESS√ÉO (COM TIMEOUT)
            try:
                await asyncio.wait_for(
                    save_user_session(session_id, new_session_data),
                    timeout=self.firebase_timeout
                )
                logger.info(f"‚úÖ [{correlation_id}] Nova sess√£o salva ap√≥s restart")
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ [{correlation_id}] Timeout Firebase save restart ({self.firebase_timeout}s)")
            except Exception as save_error:
                logger.warning(f"‚ùå [{correlation_id}] Erro save restart: {str(save_error)}")
            
            # ‚úÖ PROCESSAR MENSAGEM NA NOVA SESS√ÉO
            return await self._process_conversation_flow(new_session_data, message, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro no auto-restart: {str(e)}")
            
            # ‚úÖ FALLBACK PARA SAUDA√á√ÉO SIMPLES
            return {
                "session_id": session_id,
                "response": "Ol√°! Vamos come√ßar uma nova conversa. Qual √© o seu nome completo?",
                "response_type": "restart_fallback",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "phone_submitted": False,
                "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                "error": str(e),
                "correlation_id": correlation_id
            }

    async def _process_conversation_flow(
        self, 
        session_data: Dict[str, Any], 
        message: str, 
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ PROCESSAR FLUXO DE CONVERSA COM VALIDA√á√ÉO RIGOROSA
        """
        try:
            session_id = session_data["session_id"]
            
            # ‚úÖ GARANTIR LEAD_DATA V√ÅLIDO
            lead_data = self.safe_get_lead_data(session_data)
            
            # ‚úÖ VERIFICAR SE J√Å COLETOU TELEFONE
            if session_data.get("flow_completed") and not session_data.get("phone_submitted"):
                return await self._handle_phone_collection(session_data, message, correlation_id)
            
            # ‚úÖ TENTAR GEMINI PRIMEIRO (COM TIMEOUT AGRESSIVO)
            gemini_result = await self._attempt_gemini_response(message, session_id, session_data, correlation_id)
            
            if gemini_result["success"]:
                # ‚úÖ SUCESSO GEMINI - RETORNAR COM LEAD_DATA V√ÅLIDO
                result = {
                    "session_id": session_id,
                    "response": gemini_result["response"],
                    "response_type": "ai_intelligent",
                    "ai_mode": True,
                    "gemini_available": True,
                    "lead_data": lead_data,  # ‚úÖ SEMPRE PRESENTE
                    "message_count": session_data.get("message_count", 0) + 1
                }
                
                # ‚úÖ SALVAR SESS√ÉO ATUALIZADA (COM TIMEOUT)
                session_data["message_count"] = result["message_count"]
                session_data["last_updated"] = datetime.now().isoformat()
                session_data["gemini_available"] = True
                
                try:
                    await asyncio.wait_for(
                        save_user_session(session_id, session_data),
                        timeout=self.firebase_timeout
                    )
                except asyncio.TimeoutError:
                    logger.warning(f"‚è∞ [{correlation_id}] Timeout save Gemini success ({self.firebase_timeout}s)")
                except Exception as save_error:
                    logger.warning(f"‚ùå [{correlation_id}] Erro save Gemini: {str(save_error)}")
                
                return result
            
            # ‚úÖ GEMINI FALHOU - USAR FALLBACK FIREBASE
            logger.info(f"‚ö° [{correlation_id}] Ativando fallback Firebase")
            return await self._get_fallback_response(session_data, message, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro no fluxo: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            return {
                "session_id": session_data.get("session_id", "error"),
                "response": "Desculpe, vamos tentar novamente. Qual √© o seu nome completo?",
                "response_type": "flow_error_recovery",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                "error": str(e)
            }

    async def _attempt_gemini_response(
        self, 
        message: str, 
        session_id: str, 
        session_data: Dict[str, Any],
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ TENTAR RESPOSTA GEMINI COM TIMEOUT ULTRA AGRESSIVO
        """
        try:
            logger.info(f"ü§ñ [{correlation_id}] Tentando Gemini (timeout: {self.gemini_timeout}s)")
            
            # ‚úÖ TIMEOUT ULTRA AGRESSIVO PARA CLOUD RUN
            response = await asyncio.wait_for(
                ai_orchestrator.generate_response(
                    message, 
                    session_id=session_id,
                    context={"platform": session_data.get("platform", "web")}
                ),
                timeout=self.gemini_timeout
            )
            
            if response and len(response.strip()) > 0:
                logger.info(f"‚úÖ [{correlation_id}] Gemini sucesso: {response[:50]}...")
                self.gemini_available = True
                return {"success": True, "response": response}
            else:
                logger.warning(f"‚ö†Ô∏è [{correlation_id}] Gemini resposta vazia")
                return {"success": False, "reason": "empty_response"}
                
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ [{correlation_id}] Gemini timeout ({self.gemini_timeout}s)")
            self.gemini_available = False
            return {"success": False, "reason": "timeout"}
        except Exception as e:
            error_str = str(e).lower()
            if any(keyword in error_str for keyword in ["quota", "429", "billing", "resourceexhausted"]):
                logger.warning(f"üö´ [{correlation_id}] Gemini quota/billing: {str(e)}")
                self.gemini_available = False
                return {"success": False, "reason": "quota_exceeded"}
            else:
                logger.warning(f"‚ùå [{correlation_id}] Gemini erro: {str(e)}")
                return {"success": False, "reason": "api_error"}

    async def _get_fallback_response(
        self, 
        session_data: Dict[str, Any], 
        message: str,
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ FALLBACK FIREBASE COM VALIDA√á√ÉO RIGOROSA
        """
        try:
            session_id = session_data["session_id"]
            current_step = session_data.get("current_step", 1)
            
            # ‚úÖ GARANTIR LEAD_DATA V√ÅLIDO
            lead_data = self.safe_get_lead_data(session_data)
            
            logger.info(f"üöÄ [{correlation_id}] Fallback Firebase - Step {current_step}")
            
            # ‚úÖ OBTER FLUXO (COM TIMEOUT)
            try:
                flow = await asyncio.wait_for(
                    get_conversation_flow(),
                    timeout=self.firebase_timeout
                )
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ [{correlation_id}] Timeout flow ({self.firebase_timeout}s) - usando padr√£o")
                flow = {"steps": [
                    {"id": 1, "question": "Qual √© o seu nome completo?"},
                    {"id": 2, "question": "Qual o seu telefone e e-mail?"},
                    {"id": 3, "question": "Em qual √°rea voc√™ precisa de ajuda?"},
                    {"id": 4, "question": "Descreva sua situa√ß√£o:"},
                    {"id": 5, "question": "Posso direcion√°-lo para nosso especialista?"}
                ]}
            except Exception as flow_error:
                logger.warning(f"‚ùå [{correlation_id}] Erro flow: {str(flow_error)} - usando padr√£o")
                flow = {"steps": [
                    {"id": 1, "question": "Qual √© o seu nome completo?"},
                    {"id": 2, "question": "Qual o seu telefone e e-mail?"},
                    {"id": 3, "question": "Em qual √°rea voc√™ precisa de ajuda?"},
                    {"id": 4, "question": "Descreva sua situa√ß√£o:"},
                    {"id": 5, "question": "Posso direcion√°-lo para nosso especialista?"}
                ]}
            
            steps = flow.get("steps", [])
            
            # ‚úÖ VALIDAR RESPOSTA E AVAN√áAR
            if current_step <= len(steps):
                # ‚úÖ SALVAR RESPOSTA NO LEAD_DATA
                lead_data[f"step_{current_step}"] = message.strip()
                
                # ‚úÖ AVAN√áAR PARA PR√ìXIMO STEP
                next_step = current_step + 1
                
                if next_step <= len(steps):
                    # ‚úÖ PR√ìXIMA PERGUNTA
                    next_question_data = next((s for s in steps if s["id"] == next_step), None)
                    if next_question_data:
                        next_question = next_question_data["question"]
                        
                        # ‚úÖ PERSONALIZAR PERGUNTA COM NOME
                        if "{user_name}" in next_question and "step_1" in lead_data:
                            user_name = lead_data["step_1"].split()[0]  # Primeiro nome
                            next_question = next_question.replace("{user_name}", user_name)
                        
                        # ‚úÖ ATUALIZAR SESS√ÉO
                        session_data["current_step"] = next_step
                        session_data["lead_data"] = lead_data
                        session_data["last_updated"] = datetime.now().isoformat()
                        session_data["message_count"] = session_data.get("message_count", 0) + 1
                        
                        # ‚úÖ SALVAR SESS√ÉO (COM TIMEOUT)
                        try:
                            await asyncio.wait_for(
                                save_user_session(session_id, session_data),
                                timeout=self.firebase_timeout
                            )
                        except asyncio.TimeoutError:
                            logger.warning(f"‚è∞ [{correlation_id}] Timeout save step ({self.firebase_timeout}s)")
                        except Exception as save_error:
                            logger.warning(f"‚ùå [{correlation_id}] Erro save step: {str(save_error)}")
                        
                        return {
                            "session_id": session_id,
                            "response": next_question,
                            "response_type": "fallback_firebase",
                            "current_step": next_step,
                            "flow_completed": False,
                            "ai_mode": False,
                            "lead_data": lead_data,  # ‚úÖ SEMPRE PRESENTE
                            "message_count": session_data["message_count"]
                        }
                
                # ‚úÖ FLUXO COMPLETO - COLETAR TELEFONE
                logger.info(f"üéØ [{correlation_id}] Fluxo completo - coletando telefone")
                
                session_data["flow_completed"] = True
                session_data["lead_data"] = lead_data
                session_data["last_updated"] = datetime.now().isoformat()
                
                # ‚úÖ SALVAR SESS√ÉO (COM TIMEOUT)
                try:
                    await asyncio.wait_for(
                        save_user_session(session_id, session_data),
                        timeout=self.firebase_timeout
                    )
                except asyncio.TimeoutError:
                    logger.warning(f"‚è∞ [{correlation_id}] Timeout save complete ({self.firebase_timeout}s)")
                except Exception as save_error:
                    logger.warning(f"‚ùå [{correlation_id}] Erro save complete: {str(save_error)}")
                
                completion_message = flow.get("completion_message", "Perfeito! Para finalizar, preciso do seu WhatsApp:")
                
                # ‚úÖ PERSONALIZAR COM NOME
                if "{user_name}" in completion_message and "step_1" in lead_data:
                    user_name = lead_data["step_1"].split()[0]
                    completion_message = completion_message.replace("{user_name}", user_name)
                
                return {
                    "session_id": session_id,
                    "response": f"{completion_message}\n\nPor favor, informe seu WhatsApp para que possamos entrar em contato:",
                    "response_type": "flow_completed_collect_phone",
                    "flow_completed": True,
                    "collecting_phone": True,
                    "ai_mode": False,
                    "lead_data": lead_data,  # ‚úÖ SEMPRE PRESENTE
                    "message_count": session_data.get("message_count", 0) + 1
                }
            
            # ‚úÖ FALLBACK GEN√âRICO
            return {
                "session_id": session_id,
                "response": "Qual √© o seu nome completo?",
                "response_type": "fallback_generic",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "lead_data": lead_data,  # ‚úÖ SEMPRE PRESENTE
            }
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro fallback: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            return {
                "session_id": session_data.get("session_id", "error"),
                "response": "Vamos come√ßar novamente. Qual √© o seu nome completo?",
                "response_type": "fallback_error_recovery",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                "error": str(e)
            }

    async def _handle_phone_collection(
        self, 
        session_data: Dict[str, Any], 
        phone_message: str,
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ COLETAR TELEFONE E FINALIZAR LEAD
        """
        try:
            session_id = session_data["session_id"]
            
            # ‚úÖ GARANTIR LEAD_DATA V√ÅLIDO
            lead_data = self.safe_get_lead_data(session_data)
            
            logger.info(f"üì± [{correlation_id}] Coletando telefone: {phone_message}")
            
            # ‚úÖ VALIDAR TELEFONE
            if self._is_phone_number(phone_message):
                clean_phone = self._format_brazilian_phone(phone_message)
                
                # ‚úÖ SALVAR TELEFONE
                lead_data["phone"] = clean_phone
                session_data["phone_submitted"] = True
                session_data["lead_data"] = lead_data
                session_data["last_updated"] = datetime.now().isoformat()
                
                # ‚úÖ SALVAR LEAD NO FIREBASE (COM TIMEOUT)
                try:
                    lead_id = await asyncio.wait_for(
                        save_lead_data({"answers": lead_data}),
                        timeout=self.firebase_timeout
                    )
                    logger.info(f"üíæ [{correlation_id}] Lead salvo: {lead_id}")
                except asyncio.TimeoutError:
                    logger.warning(f"‚è∞ [{correlation_id}] Timeout save lead ({self.firebase_timeout}s)")
                    lead_id = None
                except Exception as save_error:
                    logger.warning(f"‚ùå [{correlation_id}] Erro save lead: {str(save_error)}")
                    lead_id = None
                
                # ‚úÖ SALVAR SESS√ÉO (COM TIMEOUT)
                try:
                    await asyncio.wait_for(
                        save_user_session(session_id, session_data),
                        timeout=self.firebase_timeout
                    )
                except asyncio.TimeoutError:
                    logger.warning(f"‚è∞ [{correlation_id}] Timeout save session phone ({self.firebase_timeout}s)")
                except Exception as save_error:
                    logger.warning(f"‚ùå [{correlation_id}] Erro save session phone: {str(save_error)}")
                
                # ‚úÖ ENVIAR WHATSAPP (COM TIMEOUT GLOBAL)
                whatsapp_success = await self._send_whatsapp_messages(lead_data, clean_phone, correlation_id)
                
                # ‚úÖ NOTIFICAR ADVOGADOS (COM TIMEOUT)
                await self._notify_lawyers_async(lead_data, correlation_id)
                
                return {
                    "session_id": session_id,
                    "response": f"‚úÖ Telefone {clean_phone} confirmado!\n\nObrigado! Nossa equipe entrar√° em contato em breve via WhatsApp.\n\nSuas informa√ß√µes foram registradas e um de nossos advogados especializados j√° vai analisar seu caso.",
                    "response_type": "phone_collected_fallback",
                    "flow_completed": True,
                    "phone_submitted": True,
                    "phone_number": clean_phone,
                    "lead_saved": bool(lead_id),
                    "lead_id": lead_id,
                    "whatsapp_sent": whatsapp_success,
                    "lawyers_notified": True,
                    "lead_data": lead_data,  # ‚úÖ SEMPRE PRESENTE
                }
            else:
                # ‚úÖ TELEFONE INV√ÅLIDO
                return {
                    "session_id": session_id,
                    "response": "Por favor, informe um n√∫mero de WhatsApp v√°lido (com DDD):\n\nExemplo: 11999999999",
                    "response_type": "phone_validation_error",
                    "flow_completed": True,
                    "collecting_phone": True,
                    "validation_error": True,
                    "lead_data": lead_data,  # ‚úÖ SEMPRE PRESENTE
                }
                
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro coleta telefone: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            return {
                "session_id": session_data.get("session_id", "error"),
                "response": "Ocorreu um erro. Por favor, informe seu WhatsApp novamente:",
                "response_type": "phone_collection_error",
                "flow_completed": True,
                "collecting_phone": True,
                "error": str(e),
                "lead_data": self.safe_get_lead_data(session_data),  # ‚úÖ SEMPRE PRESENTE
            }

    async def _send_whatsapp_messages(self, lead_data: Dict[str, Any], phone: str, correlation_id: str) -> bool:
        """
        ‚úÖ ENVIAR MENSAGENS WHATSAPP COM TIMEOUT GLOBAL
        """
        try:
            user_name = lead_data.get("step_1", "Cliente")
            
            # ‚úÖ MENSAGEM PARA USU√ÅRIO
            user_message = f"Ol√° {user_name}! üëã\n\nObrigado por entrar em contato com o m.lima.\n\nSuas informa√ß√µes foram registradas e um de nossos advogados especializados j√° vai analisar seu caso.\n\nEm breve entraremos em contato para agendar uma consulta. üìû"
            
            # ‚úÖ MENSAGEM INTERNA
            internal_message = f"üö® Nova Lead Capturada!\n\nNome: {user_name}\nTelefone: {phone}\n√Årea: {lead_data.get('step_3', 'N√£o informado')}\nSitua√ß√£o: {lead_data.get('step_4', 'N√£o informado')[:100]}..."
            
            # ‚úÖ ENVIAR COM TIMEOUT GLOBAL
            async def send_messages():
                tasks = []
                
                # ‚úÖ MENSAGEM PARA USU√ÅRIO
                tasks.append(baileys_service.send_whatsapp_message(phone, user_message))
                
                # ‚úÖ MENSAGEM INTERNA
                internal_phone = "5511918368812"  # N√∫mero do escrit√≥rio
                tasks.append(baileys_service.send_whatsapp_message(internal_phone, internal_message))
                
                results = await asyncio.gather(*tasks, return_exceptions=True)
                return results
            
            try:
                results = await asyncio.wait_for(
                    send_messages(),
                    timeout=self.whatsapp_global_timeout
                )
                
                success_count = sum(1 for r in results if r is True)
                logger.info(f"üì§ [{correlation_id}] WhatsApp enviado: {success_count}/2 sucessos")
                
                return success_count > 0
                
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ [{correlation_id}] Timeout WhatsApp global ({self.whatsapp_global_timeout}s)")
                return False
                
        except Exception as e:
            logger.warning(f"‚ùå [{correlation_id}] Erro WhatsApp: {str(e)}")
            return False

    async def _notify_lawyers_async(self, lead_data: Dict[str, Any], correlation_id: str):
        """
        ‚úÖ NOTIFICAR ADVOGADOS COM TIMEOUT
        """
        try:
            user_name = lead_data.get("step_1", "Cliente n√£o identificado")
            phone = lead_data.get("phone", "Telefone n√£o informado")
            area = lead_data.get("step_3", "√Årea n√£o informada")
            
            # ‚úÖ NOTIFICAR COM TIMEOUT
            await asyncio.wait_for(
                lawyer_notification_service.notify_lawyers_of_new_lead(
                    lead_name=user_name,
                    lead_phone=phone,
                    category=area,
                    additional_info=lead_data
                ),
                timeout=self.notification_timeout
            )
            
            logger.info(f"üë®‚Äç‚öñÔ∏è [{correlation_id}] Advogados notificados")
            
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ [{correlation_id}] Timeout notifica√ß√£o advogados ({self.notification_timeout}s)")
        except Exception as e:
            logger.warning(f"‚ùå [{correlation_id}] Erro notifica√ß√£o advogados: {str(e)}")

    def _is_rate_limited(self, session_id: str) -> bool:
        """Rate limiting check."""
        now = datetime.now()
        cutoff = now - timedelta(minutes=1)
        
        # Clean old messages
        self.message_counts[session_id] = [
            msg_time for msg_time in self.message_counts[session_id] 
            if msg_time > cutoff
        ]
        
        # Check limit
        if len(self.message_counts[session_id]) >= self.max_messages_per_minute:
            return True
        
        # Add current message
        self.message_counts[session_id].append(now)
        return False

    def _is_phone_number(self, text: str) -> bool:
        """Validate Brazilian phone number."""
        clean = re.sub(r'[^\d]', '', text)
        return len(clean) >= 10 and len(clean) <= 13

    def _format_brazilian_phone(self, phone: str) -> str:
        """Format Brazilian phone number."""
        clean = re.sub(r'[^\d]', '', phone)
        if not clean.startswith("55"):
            clean = f"55{clean}"
        return clean

    async def get_session_context(self, session_id: str) -> Dict[str, Any]:
        """
        ‚úÖ OBTER CONTEXTO DA SESS√ÉO COM VALIDA√á√ÉO
        """
        try:
            session_data = await get_user_session(session_id)
            
            if not session_data:
                return {
                    "session_id": session_id,
                    "status_info": {
                        "step": 1,
                        "flow_completed": False,
                        "phone_submitted": False,
                        "state": "not_found"
                    },
                    "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                    "current_step": 1,
                    "flow_completed": False,
                    "phone_submitted": False
                }
            
            # ‚úÖ GARANTIR INTEGRIDADE
            session_data = await self._ensure_session_integrity(session_id, session_data)
            
            return {
                "session_id": session_id,
                "status_info": {
                    "step": session_data.get("current_step", 1),
                    "flow_completed": session_data.get("flow_completed", False),
                    "phone_submitted": session_data.get("phone_submitted", False),
                    "state": "active"
                },
                "lead_data": self.safe_get_lead_data(session_data),  # ‚úÖ SEMPRE PRESENTE
                "current_step": session_data.get("current_step", 1),
                "flow_completed": session_data.get("flow_completed", False),
                "phone_submitted": session_data.get("phone_submitted", False),
                "message_count": session_data.get("message_count", 0),
                "platform": session_data.get("platform", "web"),
                "created_at": session_data.get("created_at"),
                "last_updated": session_data.get("last_updated")
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter contexto {session_id}: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            return {
                "session_id": session_id,
                "status_info": {
                    "step": 1,
                    "flow_completed": False,
                    "phone_submitted": False,
                    "state": "error"
                },
                "lead_data": {},  # ‚úÖ SEMPRE PRESENTE
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "error": str(e)
            }

    async def get_overall_service_status(self) -> Dict[str, Any]:
        """Get overall service status."""
        try:
            from app.services.firebase_service import get_firebase_service_status
            
            firebase_status = await get_firebase_service_status()
            
            return {
                "overall_status": "active",
                "firebase_status": firebase_status.get("status", "unknown"),
                "ai_status": "active" if self.gemini_available else "quota_exceeded",
                "gemini_available": self.gemini_available,
                "fallback_mode": not self.gemini_available,
                "timeouts": {
                    "gemini": f"{self.gemini_timeout}s",
                    "whatsapp": f"{self.whatsapp_timeout}s",
                    "firebase": f"{self.firebase_timeout}s",
                    "whatsapp_global": f"{self.whatsapp_global_timeout}s"
                },
                "features": [
                    "lead_data_validation",
                    "personalized_greeting",
                    "auto_session_restart",
                    "ultra_aggressive_timeouts",
                    "cloud_run_optimized"
                ]
            }
        except Exception as e:
            return {
                "overall_status": "degraded",
                "error": str(e),
                "fallback_mode": True
            }

    async def handle_whatsapp_authorization(self, auth_data: Dict[str, Any]):
        """Handle WhatsApp authorization from routes."""
        try:
            logger.info(f"üîê Processando autoriza√ß√£o WhatsApp: {auth_data.get('session_id')}")
            # Implementar l√≥gica de autoriza√ß√£o se necess√°rio
            return {"status": "authorized"}
        except Exception as e:
            logger.error(f"‚ùå Erro autoriza√ß√£o WhatsApp: {str(e)}")
            return {"status": "error", "error": str(e)}


# ‚úÖ INST√ÇNCIA GLOBAL
intelligent_orchestrator = IntelligentHybridOrchestrator()

logger.info("üöÄ IntelligentHybridOrchestrator carregado com timeouts ultra agressivos para Cloud Run")