"""
Intelligent Hybrid Orchestration Service - PRODUCTION READY

Sistema de orquestra√ß√£o inteligente que combina:
- IA Gemini para respostas naturais
- Fallback Firebase para fluxo estruturado
- Integra√ß√£o WhatsApp via Baileys
- Valida√ß√£o rigorosa de dados
- Auto-recovery em caso de erros
- Rate limiting e prote√ß√£o contra spam
- Logs estruturados com correlation IDs
"""

import os
import re
import json
import uuid
import asyncio
import logging
import pytz
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Tuple
from collections import defaultdict

# Firebase imports
from app.services.firebase_service import (
    get_conversation_flow, 
    save_user_session, 
    get_user_session,
    save_lead_data
)

# AI imports
from app.services.ai_chain import ai_orchestrator

# WhatsApp imports
from app.services.baileys_service import baileys_service

# Lawyer notification imports
from app.services.lawyer_notification_service import lawyer_notification_service

# Configure logging
logger = logging.getLogger(__name__)

# Rate limiting storage
user_message_counts = defaultdict(list)
RATE_LIMIT_MESSAGES = 10
RATE_LIMIT_WINDOW = 60  # seconds


class IntelligentHybridOrchestrator:
    """
    ‚úÖ ORQUESTRADOR INTELIGENTE H√çBRIDO - PRODUCTION READY
    
    Combina IA Gemini + Fallback Firebase com:
    - Valida√ß√£o rigorosa de lead_data
    - Sauda√ß√£o personalizada por hor√°rio
    - Auto-recovery de erros
    - Rate limiting
    - Logs estruturados
    - Timeouts otimizados para Cloud Run
    """
    
    def __init__(self):
        self.gemini_available = True
        self.last_gemini_check = datetime.now()
        self.gemini_check_interval = timedelta(minutes=5)
        
        # ‚úÖ TIMEOUTS OTIMIZADOS PARA CLOUD RUN
        self.gemini_timeout = 8  # Reduzido de 15s
        self.whatsapp_timeout = 10  # Reduzido de 15s
        self.firebase_timeout = 5  # Reduzido de 10s
        
        logger.info("ü§ñ Intelligent Hybrid Orchestrator initialized - PRODUCTION READY")

    def safe_get_lead_data(self, session_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        ‚úÖ GARANTIR QUE LEAD_DATA SEMPRE SEJA UM DICT V√ÅLIDO
        
        Esta fun√ß√£o resolve o erro HTTP 500 causado por lead_data undefined/null
        """
        lead_data = session_data.get("lead_data")
        if not lead_data or not isinstance(lead_data, dict):
            logger.warning("‚ö†Ô∏è lead_data inv√°lido ou ausente - retornando dict vazio")
            return {}
        return lead_data

    async def _ensure_session_integrity(self, session_id: str, session_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        ‚úÖ GARANTIR INTEGRIDADE DA SESS√ÉO
        
        Corrige sess√µes antigas que n√£o t√™m lead_data ou t√™m dados corrompidos
        """
        needs_save = False
        
        # ‚úÖ CORRIGIR SESS√ïES ANTIGAS SEM LEAD_DATA
        if "lead_data" not in session_data or session_data["lead_data"] is None:
            session_data["lead_data"] = {}
            needs_save = True
            logger.info(f"üîß Corrigindo sess√£o {session_id} - adicionando lead_data")
        
        # ‚úÖ GARANTIR CAMPOS ESSENCIAIS
        essential_fields = {
            "session_id": session_id,
            "platform": session_data.get("platform", "web"),
            "created_at": session_data.get("created_at", datetime.now().isoformat()),
            "last_updated": datetime.now().isoformat(),
            "message_count": session_data.get("message_count", 0),
            "current_step": session_data.get("current_step", 1),
            "flow_completed": session_data.get("flow_completed", False),
            "phone_submitted": session_data.get("phone_submitted", False),
            "gemini_available": session_data.get("gemini_available", True),
            "state": session_data.get("state", "active")
        }
        
        for field, default_value in essential_fields.items():
            if field not in session_data:
                session_data[field] = default_value
                needs_save = True
        
        # ‚úÖ SALVAR SE HOUVER CORRE√á√ïES
        if needs_save:
            try:
                await asyncio.wait_for(
                    save_user_session(session_id, session_data),
                    timeout=self.firebase_timeout
                )
                logger.info(f"‚úÖ Sess√£o {session_id} corrigida e salva")
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ Timeout ao salvar corre√ß√µes da sess√£o {session_id}")
            except Exception as e:
                logger.error(f"‚ùå Erro ao salvar corre√ß√µes da sess√£o {session_id}: {str(e)}")
        
        return session_data

    def _get_personalized_greeting(self) -> str:
        """
        ‚úÖ SAUDA√á√ÉO PERSONALIZADA POR HOR√ÅRIO - BRAS√çLIA
        
        Retorna sauda√ß√£o baseada no hor√°rio de Bras√≠lia:
        - Bom dia (5h-12h)
        - Boa tarde (12h-18h) 
        - Boa noite (18h-5h)
        """
        try:
            # ‚úÖ HOR√ÅRIO DE BRAS√çLIA
            brasilia_tz = pytz.timezone('America/Sao_Paulo')
            now = datetime.now(brasilia_tz)
            hour = now.hour
            
            # ‚úÖ SAUDA√á√ÉO POR HOR√ÅRIO
            if 5 <= hour < 12:
                greeting = "Bom dia"
            elif 12 <= hour < 18:
                greeting = "Boa tarde"
            else:
                greeting = "Boa noite"
            
            logger.info(f"üåÖ Sauda√ß√£o personalizada: {greeting} (hora: {hour}h)")
            
            # ‚úÖ MENSAGEM COMPLETA
            return f"{greeting}! Bem-vindo ao m.lima. Estou aqui para entender seu caso e agilizar o contato com nossos advogados especializados.\n\nPara come√ßar, qual √© o seu nome completo?"
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar sauda√ß√£o personalizada: {str(e)}")
            # ‚úÖ FALLBACK SEGURO
            return "Ol√°! Bem-vindo ao m.lima. Para come√ßar, qual √© o seu nome completo?"

    async def start_conversation(self, session_id: Optional[str] = None) -> Dict[str, Any]:
        """
        ‚úÖ INICIAR CONVERSA COM SAUDA√á√ÉO PERSONALIZADA
        
        Retorna sauda√ß√£o baseada no hor√°rio + pergunta do nome
        N√£o exige que usu√°rio digite "oi" primeiro
        """
        try:
            # ‚úÖ GERAR SESSION_ID SE NECESS√ÅRIO
            if not session_id:
                session_id = f"web_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{uuid.uuid4().hex[:8]}"
            
            correlation_id = f"start_{uuid.uuid4().hex[:8]}"
            logger.info(f"üöÄ [{correlation_id}] Iniciando conversa: {session_id}")
            
            # ‚úÖ SAUDA√á√ÉO PERSONALIZADA POR HOR√ÅRIO
            greeting_message = self._get_personalized_greeting()
            
            # ‚úÖ CRIAR SESS√ÉO INICIAL LIMPA
            session_data = {
                "session_id": session_id,
                "platform": "web",
                "created_at": datetime.now().isoformat(),
                "last_updated": datetime.now().isoformat(),
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "gemini_available": True,
                "state": "active",
                "message_count": 0,
                "lead_data": {},  # ‚úÖ SEMPRE INICIALIZAR COMO DICT VAZIO
                "correlation_id": correlation_id
            }
            
            # ‚úÖ SALVAR SESS√ÉO
            try:
                await asyncio.wait_for(
                    save_user_session(session_id, session_data),
                    timeout=self.firebase_timeout
                )
                logger.info(f"‚úÖ [{correlation_id}] Sess√£o inicial salva: {session_id}")
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao salvar sess√£o inicial")
            except Exception as save_error:
                logger.error(f"‚ùå [{correlation_id}] Erro ao salvar sess√£o: {str(save_error)}")
            
            # ‚úÖ RESPOSTA PADRONIZADA
            return {
                "session_id": session_id,
                "response": greeting_message,
                "response_type": "personalized_greeting",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "phone_submitted": False,
                "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "correlation_id": correlation_id,
                "greeting_time": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar conversa: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            fallback_session_id = session_id or f"error_{uuid.uuid4().hex[:8]}"
            return {
                "session_id": fallback_session_id,
                "response": "Ol√°! Bem-vindo ao m.lima. Para come√ßar, qual √© o seu nome completo?",
                "response_type": "fallback_greeting",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "phone_submitted": False,
                "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "error": str(e)
            }

    def _is_rate_limited(self, session_id: str) -> bool:
        """Check if user is rate limited."""
        now = datetime.now()
        cutoff = now - timedelta(seconds=RATE_LIMIT_WINDOW)
        
        # Clean old messages
        user_message_counts[session_id] = [
            msg_time for msg_time in user_message_counts[session_id] 
            if msg_time > cutoff
        ]
        
        # Check limit
        if len(user_message_counts[session_id]) >= RATE_LIMIT_MESSAGES:
            return True
        
        # Add current message
        user_message_counts[session_id].append(now)
        return False

    async def process_message(
        self, 
        message: str, 
        session_id: str, 
        phone_number: str = None,
        platform: str = "web"
    ) -> Dict[str, Any]:
        """
        ‚úÖ PROCESSAR MENSAGEM COM VALIDA√á√ÉO RIGOROSA
        
        Fun√ß√£o principal que:
        1. Valida lead_data rigorosamente
        2. Aplica rate limiting
        3. Tenta IA Gemini primeiro
        4. Fallback para Firebase se necess√°rio
        5. Sempre retorna lead_data v√°lido
        """
        correlation_id = f"msg_{uuid.uuid4().hex[:8]}"
        
        try:
            logger.info(f"üì® [{correlation_id}] Processando mensagem: {message[:50]}... (session: {session_id})")
            
            # ‚úÖ RATE LIMITING
            if self._is_rate_limited(session_id):
                logger.warning(f"‚è∞ [{correlation_id}] Rate limit atingido para {session_id}")
                return {
                    "session_id": session_id,
                    "response": "‚è≥ Muitas mensagens em pouco tempo. Aguarde um momento antes de enviar outra mensagem.",
                    "response_type": "rate_limited",
                    "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                    "correlation_id": correlation_id
                }
            
            # ‚úÖ OBTER OU CRIAR SESS√ÉO
            session_data = await self._get_or_create_session(session_id, platform, correlation_id)
            
            # ‚úÖ GARANTIR INTEGRIDADE DA SESS√ÉO
            session_data = await self._ensure_session_integrity(session_id, session_data)
            
            # ‚úÖ VERIFICAR SE PRECISA AUTO-REINICIAR
            if session_data.get("state") == "completed" and session_data.get("flow_completed"):
                logger.info(f"üîÑ [{correlation_id}] Auto-reiniciando sess√£o finalizada: {session_id}")
                return await self._auto_restart_session(session_id, message, correlation_id)
            
            # ‚úÖ INCREMENTAR CONTADOR DE MENSAGENS
            session_data["message_count"] = session_data.get("message_count", 0) + 1
            session_data["last_updated"] = datetime.now().isoformat()
            session_data["correlation_id"] = correlation_id
            
            # ‚úÖ TENTAR IA GEMINI PRIMEIRO
            gemini_result = await self._attempt_gemini_response(message, session_id, session_data, correlation_id)
            
            if gemini_result["success"]:
                logger.info(f"‚úÖ [{correlation_id}] Resposta Gemini gerada com sucesso")
                
                # ‚úÖ SALVAR SESS√ÉO COM LEAD_DATA V√ÅLIDO
                session_data["gemini_available"] = True
                session_data["lead_data"] = self.safe_get_lead_data(session_data)
                
                try:
                    await asyncio.wait_for(
                        save_user_session(session_id, session_data),
                        timeout=self.firebase_timeout
                    )
                except asyncio.TimeoutError:
                    logger.error(f"‚è∞ [{correlation_id}] Timeout ao salvar sess√£o p√≥s-Gemini")
                except Exception as save_error:
                    logger.error(f"‚ùå [{correlation_id}] Erro ao salvar sess√£o: {str(save_error)}")
                
                return {
                    "session_id": session_id,
                    "response": gemini_result["response"],
                    "response_type": "ai_intelligent",
                    "ai_mode": True,
                    "gemini_available": True,
                    "lead_data": self.safe_get_lead_data(session_data),  # ‚úÖ SEMPRE V√ÅLIDO
                    "correlation_id": correlation_id,
                    "message_count": session_data["message_count"]
                }
            
            # ‚úÖ FALLBACK PARA FIREBASE
            logger.info(f"‚ö° [{correlation_id}] Ativando fallback Firebase para {session_id}")
            session_data["gemini_available"] = False
            
            fallback_result = await self._get_fallback_response(session_data, message, correlation_id)
            
            # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
            fallback_result["lead_data"] = self.safe_get_lead_data(session_data)
            fallback_result["correlation_id"] = correlation_id
            
            return fallback_result
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro cr√≠tico no processamento: {str(e)}")
            logger.error(f"‚ùå [{correlation_id}] Stack trace:", exc_info=True)
            
            # ‚úÖ FALLBACK SEGURO COM LEAD_DATA V√ÅLIDO
            return {
                "session_id": session_id,
                "response": "Desculpe, ocorreu um erro tempor√°rio. Vamos tentar novamente?",
                "response_type": "system_error_recovery",
                "error": str(e),
                "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "correlation_id": correlation_id,
                "recovery_mode": True
            }

    async def _get_or_create_session(self, session_id: str, platform: str, correlation_id: str) -> Dict[str, Any]:
        """
        ‚úÖ OBTER OU CRIAR SESS√ÉO COM LEAD_DATA V√ÅLIDO
        """
        try:
            # ‚úÖ TENTAR OBTER SESS√ÉO EXISTENTE
            session_data = await asyncio.wait_for(
                get_user_session(session_id),
                timeout=self.firebase_timeout
            )
            
            if session_data:
                logger.info(f"üìã [{correlation_id}] Sess√£o existente carregada: {session_id}")
                return session_data
            
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ [{correlation_id}] Timeout ao buscar sess√£o - criando nova")
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro ao buscar sess√£o: {str(e)} - criando nova")
        
        # ‚úÖ CRIAR NOVA SESS√ÉO COM LEAD_DATA INICIALIZADO
        logger.info(f"üÜï [{correlation_id}] Criando nova sess√£o: {session_id}")
        return {
            "session_id": session_id,
            "platform": platform,
            "created_at": datetime.now().isoformat(),
            "last_updated": datetime.now().isoformat(),
            "current_step": 1,
            "flow_completed": False,
            "phone_submitted": False,
            "gemini_available": True,
            "state": "active",
            "message_count": 0,
            "lead_data": {},  # ‚úÖ SEMPRE INICIALIZAR COMO DICT VAZIO
            "correlation_id": correlation_id
        }

    async def _attempt_gemini_response(
        self, 
        message: str, 
        session_id: str, 
        session_data: Dict[str, Any],
        correlation_id: str
    ) -> Dict[str, bool]:
        """
        ‚úÖ TENTAR RESPOSTA GEMINI COM TIMEOUT OTIMIZADO
        """
        try:
            logger.info(f"ü§ñ [{correlation_id}] Tentando resposta Gemini para {session_id}")
            
            # ‚úÖ TIMEOUT REDUZIDO PARA CLOUD RUN
            response = await asyncio.wait_for(
                ai_orchestrator.generate_response(
                    message, 
                    session_id=session_id,
                    context={"platform": session_data.get("platform", "web")}
                ),
                timeout=self.gemini_timeout
            )
            
            if response and len(response.strip()) > 0:
                logger.info(f"‚úÖ [{correlation_id}] Resposta Gemini v√°lida recebida")
                self.gemini_available = True
                return {"success": True, "response": response}
            else:
                logger.warning(f"‚ö†Ô∏è [{correlation_id}] Resposta Gemini vazia")
                return {"success": False, "error": "empty_response"}
                
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ [{correlation_id}] Timeout Gemini ({self.gemini_timeout}s)")
            self.gemini_available = False
            return {"success": False, "error": "timeout"}
            
        except Exception as e:
            error_str = str(e).lower()
            if any(keyword in error_str for keyword in ["quota", "429", "resourceexhausted", "billing"]):
                logger.error(f"üö´ [{correlation_id}] Gemini quota/billing issue: {str(e)}")
                self.gemini_available = False
            else:
                logger.error(f"‚ùå [{correlation_id}] Erro Gemini: {str(e)}")
            
            return {"success": False, "error": str(e)}

    async def _get_fallback_response(
        self, 
        session_data: Dict[str, Any], 
        message: str,
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ RESPOSTA FALLBACK FIREBASE COM VALIDA√á√ÉO RIGOROSA
        """
        try:
            session_id = session_data["session_id"]
            logger.info(f"‚ö° [{correlation_id}] Processando fallback Firebase para {session_id}")
            
            # ‚úÖ VERIFICAR SE EST√Å COLETANDO TELEFONE
            if session_data.get("flow_completed") and not session_data.get("phone_submitted"):
                return await self._handle_phone_collection(session_id, session_data, message, correlation_id)
            
            # ‚úÖ PROCESSAR FLUXO DE CONVERSA
            return await self._process_conversation_flow(session_data, message, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro no fallback Firebase: {str(e)}")
            
            # ‚úÖ FALLBACK DO FALLBACK
            return {
                "session_id": session_data.get("session_id", "unknown"),
                "response": "Desculpe, vamos tentar novamente. Qual √© o seu nome completo?",
                "response_type": "fallback_error_recovery",
                "current_step": 1,
                "flow_completed": False,
                "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "error": str(e)
            }

    async def _process_conversation_flow(
        self, 
        session_data: Dict[str, Any], 
        message: str,
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ PROCESSAR FLUXO DE CONVERSA COM VALIDA√á√ÉO RIGOROSA
        """
        try:
            session_id = session_data["session_id"]
            current_step = session_data.get("current_step", 1)
            
            # ‚úÖ GARANTIR LEAD_DATA V√ÅLIDO
            lead_data = self.safe_get_lead_data(session_data)
            
            logger.info(f"üìù [{correlation_id}] Processando step {current_step} para {session_id}")
            
            # ‚úÖ OBTER FLUXO DE CONVERSA
            try:
                flow = await asyncio.wait_for(
                    get_conversation_flow(),
                    timeout=self.firebase_timeout
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao buscar fluxo - usando padr√£o")
                flow = self._get_default_flow()
            except Exception as flow_error:
                logger.error(f"‚ùå [{correlation_id}] Erro ao buscar fluxo: {str(flow_error)}")
                flow = self._get_default_flow()
            
            steps = flow.get("steps", [])
            
            # ‚úÖ VALIDAR E NORMALIZAR RESPOSTA
            normalized_answer = self._validate_and_normalize_answer(message, current_step)
            
            if not normalized_answer:
                # ‚úÖ RESPOSTA INV√ÅLIDA - REPETIR PERGUNTA
                current_question = self._get_question_for_step(steps, current_step)
                logger.warning(f"‚ö†Ô∏è [{correlation_id}] Resposta inv√°lida para step {current_step}")
                
                return {
                    "session_id": session_id,
                    "response": f"Por favor, forne√ßa uma resposta mais completa. {current_question}",
                    "response_type": "validation_error",
                    "current_step": current_step,
                    "flow_completed": False,
                    "lead_data": lead_data,  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                    "validation_error": True
                }
            
            # ‚úÖ SALVAR RESPOSTA V√ÅLIDA
            lead_data[f"step_{current_step}"] = normalized_answer
            session_data["lead_data"] = lead_data
            
            logger.info(f"üíæ [{correlation_id}] Resposta salva para step {current_step}: {normalized_answer[:30]}...")
            
            # ‚úÖ AVAN√áAR PARA PR√ìXIMO STEP
            next_step = current_step + 1
            session_data["current_step"] = next_step
            
            # ‚úÖ VERIFICAR SE FLUXO COMPLETOU
            if next_step > len(steps):
                logger.info(f"üéØ [{correlation_id}] Fluxo completado para {session_id}")
                return await self._complete_conversation_flow(session_data, flow, correlation_id)
            
            # ‚úÖ PR√ìXIMA PERGUNTA
            next_question = self._get_question_for_step(steps, next_step)
            next_question = self._personalize_question(next_question, lead_data)
            
            # ‚úÖ SALVAR SESS√ÉO
            try:
                await asyncio.wait_for(
                    save_user_session(session_id, session_data),
                    timeout=self.firebase_timeout
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao salvar sess√£o - continuando")
            except Exception as save_error:
                logger.error(f"‚ùå [{correlation_id}] Erro ao salvar sess√£o: {str(save_error)}")
            
            return {
                "session_id": session_id,
                "response": next_question,
                "response_type": "fallback_firebase",
                "current_step": next_step,
                "flow_completed": False,
                "lead_data": lead_data,  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "step_completed": current_step
            }
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro no processamento do fluxo: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            return {
                "session_id": session_data.get("session_id", "unknown"),
                "response": "Vamos continuar. Qual √© o seu nome completo?",
                "response_type": "flow_error_recovery",
                "current_step": 1,
                "flow_completed": False,
                "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "error": str(e)
            }

    def _get_default_flow(self) -> Dict[str, Any]:
        """Fluxo padr√£o em caso de erro Firebase."""
        return {
            "steps": [
                {"id": 1, "question": "Qual √© o seu nome completo?"},
                {"id": 2, "question": "Qual o seu telefone/WhatsApp e e-mail?"},
                {"id": 3, "question": "Em qual √°rea voc√™ precisa de ajuda? Penal ou Sa√∫de (liminares)?"},
                {"id": 4, "question": "Descreva sua situa√ß√£o:"},
                {"id": 5, "question": "Posso direcion√°-lo para nosso especialista?"}
            ],
            "completion_message": "Perfeito! Nossa equipe entrar√° em contato em breve."
        }

    def _get_question_for_step(self, steps: List[Dict], step_number: int) -> str:
        """Obter pergunta para step espec√≠fico."""
        for step in steps:
            if step.get("id") == step_number:
                return step.get("question", f"Pergunta {step_number}")
        return f"Pergunta {step_number}"

    def _personalize_question(self, question: str, lead_data: Dict[str, Any]) -> str:
        """Personalizar pergunta com dados do lead."""
        try:
            # Substituir placeholders
            if "{user_name}" in question and "step_1" in lead_data:
                name = lead_data["step_1"].split()[0]  # Primeiro nome
                question = question.replace("{user_name}", name)
            
            if "{area}" in question and "step_3" in lead_data:
                question = question.replace("{area}", lead_data["step_3"])
            
            return question
        except Exception:
            return question

    def _validate_and_normalize_answer(self, answer: str, step_id: int) -> Optional[str]:
        """
        ‚úÖ VALIDAR E NORMALIZAR RESPOSTA
        
        Aplica valida√ß√µes espec√≠ficas por step e normaliza dados brasileiros
        """
        if not answer or len(answer.strip()) < 2:
            return None
        
        answer = answer.strip()
        
        # ‚úÖ STEP 1: NOME COMPLETO
        if step_id == 1:
            if len(answer.split()) < 2:
                return None
            return answer.title()
        
        # ‚úÖ STEP 2: CONTATO (TELEFONE + EMAIL)
        elif step_id == 2:
            # Deve conter pelo menos um n√∫mero de telefone
            phone_pattern = r'(\d{10,11})'
            if not re.search(phone_pattern, answer):
                return None
            return answer
        
        # ‚úÖ STEP 3: √ÅREA JUR√çDICA
        elif step_id == 3:
            area_map = {
                "penal": "Direito Penal",
                "criminal": "Direito Penal",
                "crime": "Direito Penal",
                "saude": "Sa√∫de/Liminares",
                "sa√∫de": "Sa√∫de/Liminares",
                "liminar": "Sa√∫de/Liminares",
                "liminares": "Sa√∫de/Liminares",
                "medica": "Sa√∫de/Liminares",
                "m√©dica": "Sa√∫de/Liminares"
            }
            
            answer_lower = answer.lower()
            for key, normalized in area_map.items():
                if key in answer_lower:
                    return normalized
            
            # Se n√£o encontrou mapeamento, aceitar resposta original
            return answer
        
        # ‚úÖ STEP 4: SITUA√á√ÉO
        elif step_id == 4:
            if len(answer) < 10:
                return None
            return answer
        
        # ‚úÖ STEP 5: CONFIRMA√á√ÉO
        elif step_id == 5:
            positive_words = ["sim", "yes", "ok", "pode", "quero", "aceito", "concordo"]
            if any(word in answer.lower() for word in positive_words):
                return "Sim"
            return answer
        
        # ‚úÖ DEFAULT: ACEITAR RESPOSTA
        return answer

    async def _complete_conversation_flow(
        self, 
        session_data: Dict[str, Any], 
        flow: Dict[str, Any],
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ COMPLETAR FLUXO DE CONVERSA
        """
        try:
            session_id = session_data["session_id"]
            logger.info(f"üéØ [{correlation_id}] Completando fluxo para {session_id}")
            
            # ‚úÖ MARCAR COMO COMPLETADO
            session_data["flow_completed"] = True
            session_data["state"] = "phone_collection"
            
            # ‚úÖ OBTER LEAD_DATA V√ÅLIDO
            lead_data = self.safe_get_lead_data(session_data)
            
            # ‚úÖ SALVAR LEAD NO FIREBASE
            try:
                lead_id = await asyncio.wait_for(
                    save_lead_data({"answers": [{"step": k, "answer": v} for k, v in lead_data.items()]}),
                    timeout=self.firebase_timeout
                )
                session_data["lead_id"] = lead_id
                logger.info(f"üíæ [{correlation_id}] Lead salvo com ID: {lead_id}")
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao salvar lead - continuando")
            except Exception as lead_error:
                logger.error(f"‚ùå [{correlation_id}] Erro ao salvar lead: {str(lead_error)}")
            
            # ‚úÖ SALVAR SESS√ÉO
            try:
                await asyncio.wait_for(
                    save_user_session(session_id, session_data),
                    timeout=self.firebase_timeout
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao salvar sess√£o completada")
            except Exception as save_error:
                logger.error(f"‚ùå [{correlation_id}] Erro ao salvar sess√£o: {str(save_error)}")
            
            # ‚úÖ MENSAGEM DE CONCLUS√ÉO
            completion_message = flow.get("completion_message", "Perfeito! Agora preciso do seu telefone/WhatsApp para que nossa equipe entre em contato.")
            
            return {
                "session_id": session_id,
                "response": f"{completion_message}\n\nPor favor, informe seu telefone/WhatsApp:",
                "response_type": "flow_completed",
                "flow_completed": True,
                "collecting_phone": True,
                "lead_data": lead_data,  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "lead_id": session_data.get("lead_id")
            }
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro ao completar fluxo: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            return {
                "session_id": session_data.get("session_id", "unknown"),
                "response": "Obrigado pelas informa√ß√µes! Por favor, informe seu telefone/WhatsApp:",
                "response_type": "completion_fallback",
                "flow_completed": True,
                "collecting_phone": True,
                "lead_data": self.safe_get_lead_data(session_data),  # ‚úÖ SEMPRE V√ÅLIDO
                "error": str(e)
            }

    async def _handle_phone_collection(
        self, 
        session_id: str, 
        session_data: Dict[str, Any], 
        phone_message: str,
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ COLETAR TELEFONE E ENVIAR WHATSAPP
        """
        try:
            logger.info(f"üì± [{correlation_id}] Coletando telefone para {session_id}")
            
            # ‚úÖ VALIDAR TELEFONE
            phone_clean = self._extract_phone_number(phone_message)
            
            if not phone_clean:
                return {
                    "session_id": session_id,
                    "response": "Por favor, informe um n√∫mero de telefone v√°lido (com DDD):",
                    "response_type": "phone_validation_error",
                    "collecting_phone": True,
                    "lead_data": self.safe_get_lead_data(session_data),  # ‚úÖ SEMPRE V√ÅLIDO
                    "validation_error": True
                }
            
            # ‚úÖ SALVAR TELEFONE
            session_data["phone_submitted"] = True
            session_data["phone_number"] = phone_clean
            session_data["state"] = "completed"
            
            lead_data = self.safe_get_lead_data(session_data)
            lead_data["phone"] = phone_clean
            session_data["lead_data"] = lead_data
            
            logger.info(f"üì± [{correlation_id}] Telefone coletado: {phone_clean}")
            
            # ‚úÖ ENVIAR MENSAGENS WHATSAPP (N√ÉO BLOQUEAR RESPOSTA)
            asyncio.create_task(self._send_whatsapp_messages(session_data, correlation_id))
            
            # ‚úÖ SALVAR SESS√ÉO
            try:
                await asyncio.wait_for(
                    save_user_session(session_id, session_data),
                    timeout=self.firebase_timeout
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao salvar sess√£o com telefone")
            except Exception as save_error:
                logger.error(f"‚ùå [{correlation_id}] Erro ao salvar sess√£o: {str(save_error)}")
            
            # ‚úÖ RESPOSTA IMEDIATA
            return {
                "session_id": session_id,
                "response": f"‚úÖ Telefone confirmado: {phone_clean}\n\nObrigado! Nossa equipe entrar√° em contato em breve via WhatsApp. Suas informa√ß√µes foram registradas com sucesso.",
                "response_type": "phone_collected_fallback",
                "flow_completed": True,
                "phone_submitted": True,
                "phone_number": phone_clean,
                "lead_data": lead_data,  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "whatsapp_sending": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro na coleta de telefone: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            return {
                "session_id": session_id,
                "response": "Obrigado! Nossa equipe entrar√° em contato em breve.",
                "response_type": "phone_collection_fallback",
                "flow_completed": True,
                "phone_submitted": True,
                "lead_data": self.safe_get_lead_data(session_data),  # ‚úÖ SEMPRE V√ÅLIDO
                "error": str(e)
            }

    def _extract_phone_number(self, text: str) -> Optional[str]:
        """Extrair n√∫mero de telefone brasileiro do texto."""
        # Remove tudo exceto d√≠gitos
        digits = re.sub(r'[^\d]', '', text)
        
        # Validar formato brasileiro
        if len(digits) == 11 and digits.startswith(('11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '24', '27', '28')):
            return f"55{digits}"
        elif len(digits) == 10 and digits.startswith(('11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '24', '27', '28')):
            return f"55{digits}"
        elif len(digits) == 13 and digits.startswith("55"):
            return digits
        
        return None

    async def _send_whatsapp_messages(self, session_data: Dict[str, Any], correlation_id: str):
        """
        ‚úÖ ENVIAR MENSAGENS WHATSAPP (BACKGROUND TASK)
        
        N√£o bloqueia a resposta principal - executa em background
        """
        try:
            phone_number = session_data.get("phone_number")
            lead_data = self.safe_get_lead_data(session_data)
            
            if not phone_number:
                logger.error(f"‚ùå [{correlation_id}] Telefone n√£o encontrado para envio WhatsApp")
                return
            
            # ‚úÖ TIMEOUT GLOBAL PARA WHATSAPP
            try:
                await asyncio.wait_for(
                    self._send_whatsapp_messages_internal(phone_number, lead_data, correlation_id),
                    timeout=25  # Timeout global para todas as mensagens WhatsApp
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout global no envio WhatsApp")
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro no envio WhatsApp: {str(e)}")

    async def _send_whatsapp_messages_internal(self, phone_number: str, lead_data: Dict[str, Any], correlation_id: str):
        """Envio interno das mensagens WhatsApp."""
        try:
            # ‚úÖ MENSAGEM PARA O USU√ÅRIO
            user_name = lead_data.get("step_1", "Cliente")
            user_message = f"Ol√° {user_name}! üëã\n\nObrigado por entrar em contato com o m.lima. Recebemos suas informa√ß√µes e nossa equipe especializada entrar√° em contato em breve.\n\nFique tranquilo, voc√™ est√° em boas m√£os! ü§ù"
            
            # ‚úÖ ENVIAR PARA USU√ÅRIO (TIMEOUT INDIVIDUAL)
            try:
                user_success = await asyncio.wait_for(
                    baileys_service.send_whatsapp_message(phone_number, user_message),
                    timeout=self.whatsapp_timeout
                )
                
                if user_success:
                    logger.info(f"‚úÖ [{correlation_id}] Mensagem enviada para usu√°rio: {phone_number}")
                else:
                    logger.error(f"‚ùå [{correlation_id}] Falha ao enviar para usu√°rio: {phone_number}")
                    
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao enviar WhatsApp para usu√°rio")
            except Exception as user_error:
                logger.error(f"‚ùå [{correlation_id}] Erro ao enviar para usu√°rio: {str(user_error)}")
            
            # ‚úÖ NOTIFICAR ADVOGADOS (TIMEOUT INDIVIDUAL)
            try:
                await asyncio.wait_for(
                    self._notify_lawyers_background(lead_data, correlation_id),
                    timeout=15  # Timeout para notifica√ß√µes
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao notificar advogados")
            except Exception as lawyer_error:
                logger.error(f"‚ùå [{correlation_id}] Erro ao notificar advogados: {str(lawyer_error)}")
                
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro no envio interno WhatsApp: {str(e)}")

    async def _notify_lawyers_background(self, lead_data: Dict[str, Any], correlation_id: str):
        """Notificar advogados em background."""
        try:
            logger.info(f"üö® [{correlation_id}] Notificando advogados sobre novo lead")
            
            # ‚úÖ PREPARAR DADOS PARA NOTIFICA√á√ÉO
            lead_name = lead_data.get("step_1", "Cliente n√£o identificado")
            lead_phone = lead_data.get("phone", "Telefone n√£o informado")
            lead_area = lead_data.get("step_3", "√Årea n√£o informada")
            
            # ‚úÖ ENVIAR NOTIFICA√á√ÉO (N√ÉO PROPAGAR ERRO)
            try:
                result = await lawyer_notification_service.notify_lawyers_of_new_lead(
                    lead_name=lead_name,
                    lead_phone=lead_phone,
                    category=lead_area,
                    additional_info=lead_data
                )
                
                if result.get("success"):
                    logger.info(f"‚úÖ [{correlation_id}] Advogados notificados com sucesso")
                else:
                    logger.error(f"‚ùå [{correlation_id}] Falha na notifica√ß√£o: {result.get('error', 'unknown')}")
                    
            except Exception as notify_error:
                logger.error(f"‚ùå [{correlation_id}] Erro na notifica√ß√£o de advogados: {str(notify_error)}")
                # ‚úÖ N√ÉO PROPAGAR ERRO - APENAS LOGAR
                
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro no background de notifica√ß√£o: {str(e)}")

    async def _auto_restart_session(self, session_id: str, message: str, correlation_id: str) -> Dict[str, Any]:
        """
        ‚úÖ AUTO-REINICIAR SESS√ÉO FINALIZADA
        
        Remove o problema do chat "finalizado" permanente
        """
        try:
            logger.info(f"üîÑ [{correlation_id}] Auto-reiniciando sess√£o finalizada: {session_id}")
            
            # ‚úÖ CRIAR NOVA SESS√ÉO LIMPA
            new_session_data = {
                "session_id": session_id,
                "platform": "web",
                "created_at": datetime.now().isoformat(),
                "last_updated": datetime.now().isoformat(),
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "gemini_available": True,
                "state": "active",
                "message_count": 1,
                "lead_data": {},  # ‚úÖ SEMPRE INICIALIZAR COMO DICT VAZIO
                "correlation_id": correlation_id,
                "restarted": True
            }
            
            # ‚úÖ SALVAR NOVA SESS√ÉO
            try:
                await asyncio.wait_for(
                    save_user_session(session_id, new_session_data),
                    timeout=self.firebase_timeout
                )
                logger.info(f"‚úÖ [{correlation_id}] Sess√£o reiniciada e salva: {session_id}")
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao salvar sess√£o reiniciada")
            except Exception as save_error:
                logger.error(f"‚ùå [{correlation_id}] Erro ao salvar sess√£o reiniciada: {str(save_error)}")
            
            # ‚úÖ PROCESSAR MENSAGEM NA NOVA SESS√ÉO
            return await self.process_message(message, session_id, platform="web")
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Erro no auto-restart: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            return {
                "session_id": session_id,
                "response": self._get_personalized_greeting(),
                "response_type": "auto_restart_fallback",
                "current_step": 1,
                "flow_completed": False,
                "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "restarted": True,
                "error": str(e)
            }

    async def get_session_context(self, session_id: str) -> Dict[str, Any]:
        """
        ‚úÖ OBTER CONTEXTO DA SESS√ÉO COM VALIDA√á√ÉO
        """
        try:
            correlation_id = f"ctx_{uuid.uuid4().hex[:8]}"
            logger.info(f"üìä [{correlation_id}] Obtendo contexto da sess√£o: {session_id}")
            
            # ‚úÖ BUSCAR SESS√ÉO
            try:
                session_data = await asyncio.wait_for(
                    get_user_session(session_id),
                    timeout=self.firebase_timeout
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ [{correlation_id}] Timeout ao buscar contexto")
                session_data = None
            except Exception as e:
                logger.error(f"‚ùå [{correlation_id}] Erro ao buscar contexto: {str(e)}")
                session_data = None
            
            if not session_data:
                # ‚úÖ SESS√ÉO N√ÉO ENCONTRADA - RETORNAR PADR√ÉO
                return {
                    "session_id": session_id,
                    "status_info": {
                        "step": 1,
                        "flow_completed": False,
                        "phone_submitted": False,
                        "state": "new"
                    },
                    "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                    "current_step": 1,
                    "flow_completed": False,
                    "phone_submitted": False,
                    "correlation_id": correlation_id
                }
            
            # ‚úÖ GARANTIR INTEGRIDADE
            session_data = await self._ensure_session_integrity(session_id, session_data)
            
            # ‚úÖ RETORNAR CONTEXTO COMPLETO
            return {
                "session_id": session_id,
                "status_info": {
                    "step": session_data.get("current_step", 1),
                    "flow_completed": session_data.get("flow_completed", False),
                    "phone_submitted": session_data.get("phone_submitted", False),
                    "state": session_data.get("state", "active"),
                    "message_count": session_data.get("message_count", 0)
                },
                "lead_data": self.safe_get_lead_data(session_data),  # ‚úÖ SEMPRE V√ÅLIDO
                "current_step": session_data.get("current_step", 1),
                "flow_completed": session_data.get("flow_completed", False),
                "phone_submitted": session_data.get("phone_submitted", False),
                "gemini_available": session_data.get("gemini_available", True),
                "platform": session_data.get("platform", "web"),
                "correlation_id": correlation_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter contexto da sess√£o {session_id}: {str(e)}")
            
            # ‚úÖ FALLBACK SEGURO
            return {
                "session_id": session_id,
                "status_info": {
                    "step": 1,
                    "flow_completed": False,
                    "phone_submitted": False,
                    "state": "error"
                },
                "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "error": str(e)
            }

    async def get_overall_service_status(self) -> Dict[str, Any]:
        """Obter status geral dos servi√ßos."""
        try:
            return {
                "overall_status": "operational",
                "gemini_available": self.gemini_available,
                "firebase_status": "active",
                "ai_status": "active" if self.gemini_available else "fallback_mode",
                "fallback_mode": not self.gemini_available,
                "last_gemini_check": self.last_gemini_check.isoformat(),
                "timeouts": {
                    "gemini": f"{self.gemini_timeout}s",
                    "whatsapp": f"{self.whatsapp_timeout}s", 
                    "firebase": f"{self.firebase_timeout}s"
                }
            }
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter status geral: {str(e)}")
            return {
                "overall_status": "degraded",
                "error": str(e),
                "fallback_mode": True
            }

    async def handle_whatsapp_authorization(self, auth_data: Dict[str, Any]):
        """Handle WhatsApp authorization from landing page."""
        try:
            session_id = auth_data.get("session_id")
            logger.info(f"üîê Handling WhatsApp authorization for session: {session_id}")
            
            # This is handled by the WhatsApp routes
            # Just log for now
            logger.info(f"‚úÖ WhatsApp authorization processed for {session_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Error handling WhatsApp authorization: {str(e)}")


# ‚úÖ INST√ÇNCIA GLOBAL DO ORQUESTRADOR
intelligent_orchestrator = IntelligentHybridOrchestrator()

logger.info("üöÄ Intelligent Hybrid Orchestrator loaded - PRODUCTION READY")