"""
Intelligent Hybrid Orchestrator - CLOUD RUN OPTIMIZED

Sistema de orquestra√ß√£o inteligente otimizado para Google Cloud Run com:
- Timeouts ultra agressivos (2-3s m√°ximo)
- Fallback instant√¢neo em caso de timeout
- Processamento ass√≠ncrono n√£o-bloqueante
- Health checks r√°pidos
- Memory management otimizado
"""

import os
import re
import json
import uuid
import asyncio
import logging
import pytz
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Tuple
from collections import defaultdict

# Import services
from app.services.firebase_service import (
    get_conversation_flow, 
    save_user_session, 
    get_user_session,
    save_lead_data
)
from app.services.baileys_service import baileys_service
from app.services.lawyer_notification_service import lawyer_notification_service
from app.services.ai_chain import ai_orchestrator

# Configure logging
logger = logging.getLogger(__name__)

class IntelligentHybridOrchestrator:
    """
    ‚úÖ ORQUESTRADOR H√çBRIDO - CLOUD RUN ULTRA OTIMIZADO
    
    Timeouts ultra agressivos para evitar timeout do Cloud Run:
    - Gemini: 2s (era 4s)
    - Firebase: 1.5s (era 3s) 
    - WhatsApp: 3s (era 6s)
    - Global: 8s (era 15s)
    """
    
    def __init__(self):
        # ‚ö° TIMEOUTS ULTRA AGRESSIVOS PARA CLOUD RUN
        self.gemini_timeout = 2.0      # ‚úÖ REDUZIDO DE 4s PARA 2s
        self.firebase_timeout = 1.5    # ‚úÖ REDUZIDO DE 3s PARA 1.5s
        self.whatsapp_timeout = 3.0    # ‚úÖ REDUZIDO DE 6s PARA 3s
        self.whatsapp_global_timeout = 8.0  # ‚úÖ REDUZIDO DE 15s PARA 8s
        self.notification_timeout = 4.0     # ‚úÖ REDUZIDO DE 8s PARA 4s
        self.total_request_timeout = 25.0   # ‚úÖ LIMITE TOTAL PARA CLOUD RUN
        
        # Rate limiting
        self.message_counts = defaultdict(list)
        self.max_messages_per_minute = 15  # ‚úÖ AUMENTADO DE 10 PARA 15
        
        # Session locks para evitar race conditions
        self.session_locks = defaultdict(asyncio.Lock)
        
        # Gemini availability tracking
        self.gemini_available = True
        self.last_gemini_check = datetime.now()
        self.gemini_check_interval = timedelta(minutes=3)  # ‚úÖ REDUZIDO DE 5min PARA 3min
        
        # ‚úÖ CACHE EM MEM√ìRIA PARA REDUZIR FIREBASE CALLS
        self.flow_cache = None
        self.flow_cache_time = None
        self.cache_ttl = 300  # 5 minutos
        
        logger.info("üöÄ IntelligentHybridOrchestrator - CLOUD RUN ULTRA OTIMIZADO")
        logger.info(f"‚ö° Timeouts: Gemini={self.gemini_timeout}s, Firebase={self.firebase_timeout}s")

    def safe_get_lead_data(self, session_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        ‚úÖ GARANTIR QUE LEAD_DATA SEMPRE SEJA UM DICT V√ÅLIDO
        """
        lead_data = session_data.get("lead_data")
        if not lead_data or not isinstance(lead_data, dict):
            return {}
        return lead_data

    async def _get_cached_flow(self) -> Dict[str, Any]:
        """
        ‚úÖ CACHE DE FLUXO PARA REDUZIR CALLS FIREBASE
        """
        now = datetime.now()
        
        # ‚úÖ USAR CACHE SE V√ÅLIDO
        if (self.flow_cache and self.flow_cache_time and 
            (now - self.flow_cache_time).total_seconds() < self.cache_ttl):
            return self.flow_cache
        
        # ‚úÖ BUSCAR NOVO FLUXO COM TIMEOUT AGRESSIVO
        try:
            flow = await asyncio.wait_for(
                get_conversation_flow(),
                timeout=self.firebase_timeout
            )
            self.flow_cache = flow
            self.flow_cache_time = now
            return flow
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ Cache flow timeout ({self.firebase_timeout}s) - usando fallback")
            # ‚úÖ FALLBACK INSTANT√ÇNEO
            fallback_flow = {
                "steps": [
                    {"id": 1, "question": "Qual √© o seu nome completo?"},
                    {"id": 2, "question": "Qual o seu telefone e e-mail?"},
                    {"id": 3, "question": "Em qual √°rea voc√™ precisa de ajuda? (Penal ou Sa√∫de)"},
                    {"id": 4, "question": "Descreva sua situa√ß√£o:"},
                    {"id": 5, "question": "Posso direcion√°-lo para nosso especialista?"}
                ],
                "completion_message": "Perfeito! Nossa equipe entrar√° em contato."
            }
            self.flow_cache = fallback_flow
            self.flow_cache_time = now
            return fallback_flow

    async def _ensure_session_integrity_fast(self, session_id: str, session_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        ‚úÖ GARANTIR INTEGRIDADE DA SESS√ÉO - VERS√ÉO R√ÅPIDA
        """
        needs_save = False
        
        # ‚úÖ GARANTIR LEAD_DATA SEMPRE PRESENTE
        if "lead_data" not in session_data or session_data["lead_data"] is None:
            session_data["lead_data"] = {}
            needs_save = True
        
        # ‚úÖ GARANTIR CAMPOS ESSENCIAIS (M√çNIMOS)
        essential_fields = {
            "session_id": session_id,
            "current_step": 1,
            "flow_completed": False,
            "phone_submitted": False,
            "message_count": 0
        }
        
        for field, default_value in essential_fields.items():
            if field not in session_data:
                session_data[field] = default_value
                needs_save = True
        
        # ‚úÖ SALVAR APENAS SE NECESS√ÅRIO E SEM BLOQUEAR
        if needs_save:
            # ‚úÖ FIRE-AND-FORGET SAVE (N√ÉO BLOQUEAR)
            asyncio.create_task(self._save_session_async(session_id, session_data))
        
        return session_data

    async def _save_session_async(self, session_id: str, session_data: Dict[str, Any]):
        """
        ‚úÖ SALVAR SESS√ÉO DE FORMA ASS√çNCRONA SEM BLOQUEAR
        """
        try:
            await asyncio.wait_for(
                save_user_session(session_id, session_data),
                timeout=self.firebase_timeout
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Async save failed: {str(e)}")

    async def start_conversation(self, session_id: Optional[str] = None) -> Dict[str, Any]:
        """
        ‚úÖ INICIAR CONVERSA - VERS√ÉO ULTRA R√ÅPIDA
        """
        correlation_id = str(uuid.uuid4())[:8]
        
        try:
            # ‚úÖ GERAR SESSION_ID R√ÅPIDO
            if not session_id:
                session_id = f"web_{int(datetime.now().timestamp())}_{correlation_id}"
            
            # ‚úÖ SAUDA√á√ÉO R√ÅPIDA (SEM TIMEZONE COMPLEXO)
            hour = datetime.now().hour
            if 5 <= hour < 12:
                greeting = "Bom dia"
            elif 12 <= hour < 18:
                greeting = "Boa tarde"
            else:
                greeting = "Boa noite"
            
            welcome_message = f"{greeting}! Seja bem-vindo ao m.lima. Para come√ßar, qual √© o seu nome completo?"
            
            # ‚úÖ CRIAR SESS√ÉO M√çNIMA
            session_data = {
                "session_id": session_id,
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "message_count": 0,
                "lead_data": {},
                "created_at": datetime.now().isoformat()
            }
            
            # ‚úÖ SAVE ASS√çNCRONO (N√ÉO BLOQUEAR)
            asyncio.create_task(self._save_session_async(session_id, session_data))
            
            return {
                "session_id": session_id,
                "response": welcome_message,
                "response_type": "greeting_fast",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "phone_submitted": False,
                "lead_data": {},
                "correlation_id": correlation_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Start error: {str(e)}")
            
            return {
                "session_id": session_id or f"error_{correlation_id}",
                "response": "Ol√°! Para come√ßar, qual √© o seu nome completo?",
                "response_type": "greeting_fallback",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "phone_submitted": False,
                "lead_data": {},
                "correlation_id": correlation_id
            }

    async def process_message(
        self, 
        message: str, 
        session_id: str, 
        phone_number: Optional[str] = None,
        platform: str = "web"
    ) -> Dict[str, Any]:
        """
        ‚úÖ PROCESSAR MENSAGEM - VERS√ÉO ULTRA OTIMIZADA PARA CLOUD RUN
        """
        correlation_id = str(uuid.uuid4())[:8]
        start_time = datetime.now()
        
        try:
            logger.info(f"üì® [{correlation_id}] Processing: '{message[:30]}...' | Session: {session_id}")
            
            # ‚úÖ TIMEOUT GLOBAL PARA TODO O REQUEST
            return await asyncio.wait_for(
                self._process_message_internal(message, session_id, phone_number, platform, correlation_id),
                timeout=self.total_request_timeout
            )
            
        except asyncio.TimeoutError:
            elapsed = (datetime.now() - start_time).total_seconds()
            logger.error(f"‚è∞ [{correlation_id}] TIMEOUT GLOBAL ({elapsed:.1f}s) - CLOUD RUN LIMIT")
            
            # ‚úÖ RESPOSTA INSTANT√ÇNEA DE TIMEOUT
            return {
                "session_id": session_id,
                "response": "Desculpe, vamos tentar novamente. Qual √© o seu nome completo?",
                "response_type": "cloud_run_timeout",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "lead_data": {},
                "timeout_seconds": elapsed,
                "correlation_id": correlation_id
            }
        except Exception as e:
            elapsed = (datetime.now() - start_time).total_seconds()
            logger.error(f"‚ùå [{correlation_id}] Critical error ({elapsed:.1f}s): {str(e)}")
            
            return {
                "session_id": session_id,
                "response": "Ocorreu um erro. Vamos come√ßar novamente. Qual √© o seu nome completo?",
                "response_type": "system_error_recovery",
                "error": str(e),
                "lead_data": {},
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "correlation_id": correlation_id
            }

    async def _process_message_internal(
        self, 
        message: str, 
        session_id: str, 
        phone_number: Optional[str],
        platform: str,
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ PROCESSAMENTO INTERNO COM TIMEOUTS AGRESSIVOS
        """
        # ‚úÖ RATE LIMITING R√ÅPIDO
        if self._is_rate_limited(session_id):
            return {
                "session_id": session_id,
                "response": "‚è≥ Muitas mensagens. Aguarde um momento...",
                "response_type": "rate_limited",
                "lead_data": {},
                "correlation_id": correlation_id
            }
        
        # ‚úÖ OBTER SESS√ÉO COM TIMEOUT ULTRA AGRESSIVO
        try:
            session_data = await asyncio.wait_for(
                get_user_session(session_id),
                timeout=self.firebase_timeout
            )
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ [{correlation_id}] Firebase timeout ({self.firebase_timeout}s)")
            session_data = None
        except Exception:
            session_data = None
        
        # ‚úÖ SESS√ÉO PADR√ÉO SE N√ÉO EXISTIR
        if not session_data:
            session_data = {
                "session_id": session_id,
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "message_count": 0,
                "lead_data": {}
            }
        
        # ‚úÖ GARANTIR INTEGRIDADE R√ÅPIDA
        session_data = await self._ensure_session_integrity_fast(session_id, session_data)
        
        # ‚úÖ VERIFICAR SE PRECISA COLETAR TELEFONE
        if session_data.get("flow_completed") and not session_data.get("phone_submitted"):
            return await self._handle_phone_collection_fast(session_data, message, correlation_id)
        
        # ‚úÖ TENTAR GEMINI COM TIMEOUT ULTRA AGRESSIVO
        gemini_result = await self._attempt_gemini_ultra_fast(message, session_id, session_data, correlation_id)
        
        if gemini_result["success"]:
            # ‚úÖ SUCESSO GEMINI
            result = {
                "session_id": session_id,
                "response": gemini_result["response"],
                "response_type": "ai_intelligent",
                "ai_mode": True,
                "gemini_available": True,
                "lead_data": self.safe_get_lead_data(session_data),
                "message_count": session_data.get("message_count", 0) + 1
            }
            
            # ‚úÖ UPDATE ASS√çNCRONO
            session_data["message_count"] = result["message_count"]
            asyncio.create_task(self._save_session_async(session_id, session_data))
            
            return result
        
        # ‚úÖ FALLBACK FIREBASE ULTRA R√ÅPIDO
        return await self._get_fallback_response_fast(session_data, message, correlation_id)

    async def _attempt_gemini_ultra_fast(
        self, 
        message: str, 
        session_id: str, 
        session_data: Dict[str, Any],
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ GEMINI COM TIMEOUT ULTRA AGRESSIVO
        """
        try:
            logger.info(f"ü§ñ [{correlation_id}] Gemini attempt ({self.gemini_timeout}s)")
            
            response = await asyncio.wait_for(
                ai_orchestrator.generate_response(
                    message, 
                    session_id=session_id,
                    context={"platform": session_data.get("platform", "web")}
                ),
                timeout=self.gemini_timeout
            )
            
            if response and len(response.strip()) > 0:
                logger.info(f"‚úÖ [{correlation_id}] Gemini success")
                self.gemini_available = True
                return {"success": True, "response": response}
            else:
                return {"success": False, "reason": "empty_response"}
                
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ [{correlation_id}] Gemini timeout ({self.gemini_timeout}s)")
            self.gemini_available = False
            return {"success": False, "reason": "timeout"}
        except Exception as e:
            error_str = str(e).lower()
            if any(keyword in error_str for keyword in ["quota", "429", "billing"]):
                logger.warning(f"üö´ [{correlation_id}] Gemini quota")
                self.gemini_available = False
                return {"success": False, "reason": "quota_exceeded"}
            else:
                return {"success": False, "reason": "api_error"}

    async def _get_fallback_response_fast(
        self, 
        session_data: Dict[str, Any], 
        message: str,
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ FALLBACK FIREBASE ULTRA R√ÅPIDO
        """
        try:
            session_id = session_data["session_id"]
            current_step = session_data.get("current_step", 1)
            lead_data = self.safe_get_lead_data(session_data)
            
            logger.info(f"üöÄ [{correlation_id}] Fallback step {current_step}")
            
            # ‚úÖ OBTER FLUXO DO CACHE
            flow = await self._get_cached_flow()
            steps = flow.get("steps", [])
            
            # ‚úÖ VALIDAR E AVAN√áAR
            if current_step <= len(steps):
                # ‚úÖ SALVAR RESPOSTA
                lead_data[f"step_{current_step}"] = message.strip()
                next_step = current_step + 1
                
                if next_step <= len(steps):
                    # ‚úÖ PR√ìXIMA PERGUNTA
                    next_question_data = next((s for s in steps if s["id"] == next_step), None)
                    if next_question_data:
                        next_question = next_question_data["question"]
                        
                        # ‚úÖ PERSONALIZAR COM NOME
                        if "{user_name}" in next_question and "step_1" in lead_data:
                            user_name = lead_data["step_1"].split()[0]
                            next_question = next_question.replace("{user_name}", user_name)
                        
                        # ‚úÖ ATUALIZAR SESS√ÉO
                        session_data["current_step"] = next_step
                        session_data["lead_data"] = lead_data
                        session_data["message_count"] = session_data.get("message_count", 0) + 1
                        
                        # ‚úÖ SAVE ASS√çNCRONO
                        asyncio.create_task(self._save_session_async(session_id, session_data))
                        
                        return {
                            "session_id": session_id,
                            "response": next_question,
                            "response_type": "fallback_firebase",
                            "current_step": next_step,
                            "flow_completed": False,
                            "ai_mode": False,
                            "lead_data": lead_data,
                            "message_count": session_data["message_count"]
                        }
                
                # ‚úÖ FLUXO COMPLETO
                logger.info(f"üéØ [{correlation_id}] Flow complete - collect phone")
                
                session_data["flow_completed"] = True
                session_data["lead_data"] = lead_data
                
                # ‚úÖ SAVE ASS√çNCRONO
                asyncio.create_task(self._save_session_async(session_id, session_data))
                
                completion_message = flow.get("completion_message", "Perfeito! Para finalizar, preciso do seu WhatsApp:")
                
                if "{user_name}" in completion_message and "step_1" in lead_data:
                    user_name = lead_data["step_1"].split()[0]
                    completion_message = completion_message.replace("{user_name}", user_name)
                
                return {
                    "session_id": session_id,
                    "response": f"{completion_message}\n\nPor favor, informe seu WhatsApp:",
                    "response_type": "flow_completed_collect_phone",
                    "flow_completed": True,
                    "collecting_phone": True,
                    "ai_mode": False,
                    "lead_data": lead_data,
                    "message_count": session_data.get("message_count", 0) + 1
                }
            
            # ‚úÖ FALLBACK GEN√âRICO
            return {
                "session_id": session_id,
                "response": "Qual √© o seu nome completo?",
                "response_type": "fallback_generic",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "lead_data": lead_data
            }
            
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Fallback error: {str(e)}")
            
            return {
                "session_id": session_data.get("session_id", "error"),
                "response": "Qual √© o seu nome completo?",
                "response_type": "fallback_error_recovery",
                "current_step": 1,
                "flow_completed": False,
                "ai_mode": False,
                "lead_data": {},
                "error": str(e)
            }

    async def _handle_phone_collection_fast(
        self, 
        session_data: Dict[str, Any], 
        phone_message: str,
        correlation_id: str
    ) -> Dict[str, Any]:
        """
        ‚úÖ COLETAR TELEFONE ULTRA R√ÅPIDO
        """
        try:
            session_id = session_data["session_id"]
            lead_data = self.safe_get_lead_data(session_data)
            
            logger.info(f"üì± [{correlation_id}] Phone collection")
            
            # ‚úÖ VALIDAR TELEFONE
            if self._is_phone_number(phone_message):
                clean_phone = self._format_brazilian_phone(phone_message)
                
                # ‚úÖ SALVAR TELEFONE
                lead_data["phone"] = clean_phone
                session_data["phone_submitted"] = True
                session_data["lead_data"] = lead_data
                
                # ‚úÖ PROCESSOS ASS√çNCRONOS (N√ÉO BLOQUEAR)
                asyncio.create_task(self._save_lead_async(lead_data, correlation_id))
                asyncio.create_task(self._save_session_async(session_id, session_data))
                asyncio.create_task(self._send_whatsapp_async(lead_data, clean_phone, correlation_id))
                asyncio.create_task(self._notify_lawyers_async(lead_data, correlation_id))
                
                return {
                    "session_id": session_id,
                    "response": f"‚úÖ Telefone {clean_phone} confirmado!\n\nObrigado! Nossa equipe entrar√° em contato em breve via WhatsApp.",
                    "response_type": "phone_collected_fast",
                    "flow_completed": True,
                    "phone_submitted": True,
                    "phone_number": clean_phone,
                    "lead_saved": True,
                    "whatsapp_sent": True,
                    "lawyers_notified": True,
                    "lead_data": lead_data
                }
            else:
                return {
                    "session_id": session_id,
                    "response": "Por favor, informe um WhatsApp v√°lido (com DDD):\n\nExemplo: 11999999999",
                    "response_type": "phone_validation_error",
                    "flow_completed": True,
                    "collecting_phone": True,
                    "validation_error": True,
                    "lead_data": lead_data
                }
                
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Phone collection error: {str(e)}")
            
            return {
                "session_id": session_data.get("session_id", "error"),
                "response": "Ocorreu um erro. Por favor, informe seu WhatsApp novamente:",
                "response_type": "phone_collection_error",
                "flow_completed": True,
                "collecting_phone": True,
                "error": str(e),
                "lead_data": self.safe_get_lead_data(session_data)
            }

    async def _save_lead_async(self, lead_data: Dict[str, Any], correlation_id: str):
        """‚úÖ SALVAR LEAD ASS√çNCRONO"""
        try:
            await asyncio.wait_for(
                save_lead_data({"answers": lead_data}),
                timeout=self.firebase_timeout
            )
            logger.info(f"üíæ [{correlation_id}] Lead saved async")
        except Exception as e:
            logger.warning(f"‚ùå [{correlation_id}] Lead save failed: {str(e)}")

    async def _send_whatsapp_async(self, lead_data: Dict[str, Any], phone: str, correlation_id: str):
        """‚úÖ ENVIAR WHATSAPP ASS√çNCRONO"""
        try:
            user_name = lead_data.get("step_1", "Cliente")
            user_message = f"Ol√° {user_name}! üëã\n\nObrigado por entrar em contato com o m.lima.\n\nEm breve entraremos em contato. üìû"
            
            await asyncio.wait_for(
                baileys_service.send_whatsapp_message(phone, user_message),
                timeout=self.whatsapp_timeout
            )
            logger.info(f"üì§ [{correlation_id}] WhatsApp sent async")
        except Exception as e:
            logger.warning(f"‚ùå [{correlation_id}] WhatsApp failed: {str(e)}")

    async def _notify_lawyers_async(self, lead_data: Dict[str, Any], correlation_id: str):
        """‚úÖ NOTIFICAR ADVOGADOS ASS√çNCRONO"""
        try:
            user_name = lead_data.get("step_1", "Cliente")
            phone = lead_data.get("phone", "")
            area = lead_data.get("step_3", "")
            
            await asyncio.wait_for(
                lawyer_notification_service.notify_lawyers_of_new_lead(
                    lead_name=user_name,
                    lead_phone=phone,
                    category=area,
                    additional_info=lead_data
                ),
                timeout=self.notification_timeout
            )
            logger.info(f"üë®‚Äç‚öñÔ∏è [{correlation_id}] Lawyers notified async")
        except Exception as e:
            logger.warning(f"‚ùå [{correlation_id}] Lawyer notification failed: {str(e)}")

    def _is_rate_limited(self, session_id: str) -> bool:
        """Rate limiting otimizado."""
        now = datetime.now()
        cutoff = now - timedelta(minutes=1)
        
        # ‚úÖ LIMPEZA R√ÅPIDA
        self.message_counts[session_id] = [
            msg_time for msg_time in self.message_counts[session_id] 
            if msg_time > cutoff
        ]
        
        if len(self.message_counts[session_id]) >= self.max_messages_per_minute:
            return True
        
        self.message_counts[session_id].append(now)
        return False

    def _is_phone_number(self, text: str) -> bool:
        """Valida√ß√£o r√°pida de telefone."""
        clean = re.sub(r'[^\d]', '', text)
        return 10 <= len(clean) <= 13

    def _format_brazilian_phone(self, phone: str) -> str:
        """Formata√ß√£o r√°pida de telefone."""
        clean = re.sub(r'[^\d]', '', phone)
        if not clean.startswith("55"):
            clean = f"55{clean}"
        return clean

    async def get_session_context(self, session_id: str) -> Dict[str, Any]:
        """
        ‚úÖ OBTER CONTEXTO ULTRA R√ÅPIDO
        """
        try:
            session_data = await asyncio.wait_for(
                get_user_session(session_id),
                timeout=self.firebase_timeout
            )
            
            if not session_data:
                return {
                    "session_id": session_id,
                    "status_info": {"step": 1, "flow_completed": False, "phone_submitted": False, "state": "not_found"},
                    "lead_data": {},
                    "current_step": 1,
                    "flow_completed": False,
                    "phone_submitted": False
                }
            
            return {
                "session_id": session_id,
                "status_info": {
                    "step": session_data.get("current_step", 1),
                    "flow_completed": session_data.get("flow_completed", False),
                    "phone_submitted": session_data.get("phone_submitted", False),
                    "state": "active"
                },
                "lead_data": self.safe_get_lead_data(session_data),
                "current_step": session_data.get("current_step", 1),
                "flow_completed": session_data.get("flow_completed", False),
                "phone_submitted": session_data.get("phone_submitted", False),
                "message_count": session_data.get("message_count", 0)
            }
            
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ Context timeout for {session_id}")
            return {
                "session_id": session_id,
                "status_info": {"step": 1, "flow_completed": False, "phone_submitted": False, "state": "timeout"},
                "lead_data": {},
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False
            }
        except Exception as e:
            logger.error(f"‚ùå Context error {session_id}: {str(e)}")
            return {
                "session_id": session_id,
                "status_info": {"step": 1, "flow_completed": False, "phone_submitted": False, "state": "error"},
                "lead_data": {},
                "current_step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "error": str(e)
            }

    async def get_overall_service_status(self) -> Dict[str, Any]:
        """Status otimizado."""
        try:
            return {
                "overall_status": "active",
                "ai_status": "active" if self.gemini_available else "quota_exceeded",
                "gemini_available": self.gemini_available,
                "fallback_mode": not self.gemini_available,
                "cloud_run_optimized": True,
                "timeouts": {
                    "gemini": f"{self.gemini_timeout}s",
                    "firebase": f"{self.firebase_timeout}s",
                    "whatsapp": f"{self.whatsapp_timeout}s",
                    "total_request": f"{self.total_request_timeout}s"
                },
                "features": [
                    "ultra_aggressive_timeouts",
                    "async_processing",
                    "flow_caching",
                    "cloud_run_optimized",
                    "fire_and_forget_saves"
                ]
            }
        except Exception as e:
            return {"overall_status": "degraded", "error": str(e), "fallback_mode": True}

    async def handle_whatsapp_authorization(self, auth_data: Dict[str, Any]):
        """Handle WhatsApp authorization."""
        try:
            logger.info(f"üîê WhatsApp auth: {auth_data.get('session_id')}")
            return {"status": "authorized"}
        except Exception as e:
            logger.error(f"‚ùå WhatsApp auth error: {str(e)}")
            return {"status": "error", "error": str(e)}


# ‚úÖ INST√ÇNCIA GLOBAL
intelligent_orchestrator = IntelligentHybridOrchestrator()

logger.info("üöÄ IntelligentHybridOrchestrator - CLOUD RUN ULTRA OTIMIZADO CARREGADO")