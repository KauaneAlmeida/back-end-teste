"""
Conversation Routes

Routes for handling conversation flow and chat interactions.
These routes manage the guided conversation flow for lead qualification.
"""

import logging
from typing import Dict, Any, Optional
from fastapi import APIRouter, HTTPException, status
from fastapi.responses import JSONResponse

from app.models.request import ConversationRequest
from app.services.orchestration_service import intelligent_orchestrator

# Configure logging
logger = logging.getLogger(__name__)

# Create router
router = APIRouter()


@router.post("/conversation/start")
async def start_conversation(session_id: Optional[str] = None):
    """
    ‚úÖ INICIAR CONVERSA COM SAUDA√á√ÉO PERSONALIZADA POR HOR√ÅRIO
    
    Inicia uma nova conversa com sauda√ß√£o baseada no hor√°rio:
    - Bom dia (5h-12h)
    - Boa tarde (12h-18h) 
    - Boa noite (18h-5h)
    
    Seguido da pergunta do nome completo.
    """
    try:
        logger.info("üöÄ Iniciando nova conversa com sauda√ß√£o personalizada")
        
        # ‚úÖ USAR ORCHESTRATOR PARA SAUDA√á√ÉO PERSONALIZADA
        result = await intelligent_orchestrator.start_conversation(session_id)
        
        logger.info(f"‚úÖ Conversa iniciada: {result.get('session_id')}")
        logger.info(f"üí¨ Sauda√ß√£o: {result.get('response', '')[:50]}...")
        
        return JSONResponse(
            content=result,
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar conversa: {str(e)}")
        logger.error(f"‚ùå Stack trace:", exc_info=True)
        
        # ‚úÖ FALLBACK COM LEAD_DATA V√ÅLIDO
        fallback_response = {
            "session_id": f"error_{hash(str(e)) % 10000}",
            "response": "Ol√°! Como posso ajud√°-lo hoje?",
            "response_type": "error_fallback",
            "error": str(e),
            "lead_data": {}  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
        }
        
        return JSONResponse(
            content=fallback_response,
            status_code=200,  # N√£o retornar 500 para n√£o quebrar frontend
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )


@router.post("/conversation/respond")
async def respond_to_conversation(request: ConversationRequest):
    """
    ‚úÖ PROCESSAR RESPOSTA COM VALIDA√á√ÉO RIGOROSA DE LEAD_DATA
    
    Processa resposta do usu√°rio com:
    - Valida√ß√£o rigorosa de lead_data
    - Corre√ß√£o autom√°tica de sess√µes antigas
    - Fallback seguro em caso de erro
    - Sempre retorna lead_data v√°lido
    """
    try:
        logger.info(f"üì® Processando resposta: {request.message[:50]}...")
        logger.info(f"üÜî Session ID: {request.session_id}")
        
        # ‚úÖ PROCESSAR VIA ORCHESTRATOR COM VALIDA√á√ÉO RIGOROSA
        result = await intelligent_orchestrator.process_message(
            message=request.message,
            session_id=request.session_id or f"web_{hash(request.message) % 10000}",
            platform="web"
        )
        
        # ‚úÖ GARANTIR LEAD_DATA SEMPRE PRESENTE
        if "lead_data" not in result:
            result["lead_data"] = {}
            logger.warning("‚ö†Ô∏è lead_data ausente no resultado, adicionado automaticamente")
        
        logger.info(f"‚úÖ Resposta processada: {result.get('response_type', 'unknown')}")
        logger.info(f"üìä Lead data presente: {bool(result.get('lead_data'))}")
        
        return JSONResponse(
            content=result,
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar resposta: {str(e)}")
        logger.error(f"‚ùå Request data: message='{request.message}', session_id='{request.session_id}'")
        logger.error(f"‚ùå Stack trace:", exc_info=True)
        
        # ‚úÖ FALLBACK SEGURO COM LEAD_DATA V√ÅLIDO
        error_response = {
            "session_id": request.session_id or f"error_{hash(str(e)) % 10000}",
            "response": "Desculpe, ocorreu um erro tempor√°rio. Vamos tentar novamente?",
            "response_type": "system_error_recovery",
            "error": str(e),
            "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
            "step": 1,
            "flow_completed": False,
            "ai_mode": False
        }
        
        return JSONResponse(
            content=error_response,
            status_code=200,  # ‚úÖ N√ÉO RETORNAR 500 PARA N√ÉO QUEBRAR FRONTEND
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )


@router.get("/conversation/status/{session_id}")
async def get_conversation_status(session_id: str):
    """
    ‚úÖ OBTER STATUS DA CONVERSA COM VALIDA√á√ÉO DE LEAD_DATA
    
    Retorna status completo da conversa com:
    - Valida√ß√£o de integridade da sess√£o
    - lead_data sempre presente
    - Corre√ß√£o autom√°tica de sess√µes antigas
    """
    try:
        logger.info(f"üìä Obtendo status da conversa: {session_id}")
        
        # ‚úÖ OBTER CONTEXTO VIA ORCHESTRATOR
        context = await intelligent_orchestrator.get_session_context(session_id)
        
        # ‚úÖ GARANTIR LEAD_DATA SEMPRE PRESENTE
        if "lead_data" not in context:
            context["lead_data"] = {}
            logger.warning("‚ö†Ô∏è lead_data ausente no contexto, adicionado automaticamente")
        
        logger.info(f"‚úÖ Status obtido: {context.get('current_step', 'unknown')}")
        
        return JSONResponse(
            content=context,
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter status: {str(e)}")
        logger.error(f"‚ùå Stack trace:", exc_info=True)
        
        # ‚úÖ FALLBACK SEGURO
        error_context = {
            "session_id": session_id,
            "error": str(e),
            "status_info": {
                "step": 1,
                "flow_completed": False,
                "phone_submitted": False,
                "state": "error"
            },
            "lead_data": {},  # ‚úÖ SEMPRE RETORNAR LEAD_DATA V√ÅLIDO
            "current_step": 1,
            "flow_completed": False,
            "phone_submitted": False
        }
        
        return JSONResponse(
            content=error_context,
            status_code=200,  # ‚úÖ N√ÉO RETORNAR 500
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )


@router.get("/conversation/flow")
async def get_conversation_flow():
    """
    ‚úÖ OBTER FLUXO DE CONVERSA
    
    Retorna o fluxo de conversa configurado no Firebase.
    """
    try:
        from app.services.firebase_service import get_conversation_flow
        
        logger.info("üìã Obtendo fluxo de conversa")
        
        flow = await get_conversation_flow()
        
        logger.info(f"‚úÖ Fluxo obtido: {len(flow.get('steps', []))} steps")
        
        return JSONResponse(
            content=flow,
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter fluxo: {str(e)}")
        
        # ‚úÖ FALLBACK COM FLUXO B√ÅSICO
        fallback_flow = {
            "steps": [
                {"id": 1, "question": "Qual √© o seu nome completo?"},
                {"id": 2, "question": "Qual o seu telefone e e-mail?"},
                {"id": 3, "question": "Em qual √°rea voc√™ precisa de ajuda?"},
                {"id": 4, "question": "Descreva sua situa√ß√£o:"},
                {"id": 5, "question": "Posso direcion√°-lo para nosso especialista?"}
            ],
            "completion_message": "Obrigado! Nossa equipe entrar√° em contato.",
            "error": str(e)
        }
        
        return JSONResponse(
            content=fallback_flow,
            status_code=200,
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )


@router.post("/conversation/reset-session/{session_id}")
async def reset_session(session_id: str):
    """
    ‚úÖ RESETAR SESS√ÉO COMPLETAMENTE
    
    Limpa sess√£o e permite nova conversa.
    Remove o problema de "finalizado" permanente.
    """
    try:
        logger.info(f"üîÑ Resetando sess√£o: {session_id}")
        
        # ‚úÖ CRIAR NOVA SESS√ÉO LIMPA
        result = await intelligent_orchestrator.start_conversation(session_id)
        
        logger.info(f"‚úÖ Sess√£o resetada: {session_id}")
        
        return JSONResponse(
            content={
                "success": True,
                "message": "Sess√£o resetada com sucesso",
                "session_id": session_id,
                "new_conversation": result
            },
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao resetar sess√£o: {str(e)}")
        
        return JSONResponse(
            content={
                "success": False,
                "error": str(e),
                "session_id": session_id
            },
            status_code=200,
            headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": "true",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            }
        )